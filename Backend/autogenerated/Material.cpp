//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include <Urho3D/Resource/ResourceCache.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../XML.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Material.h"

#include <Urho3D/Graphics/Material.h>
#include <Urho3D/Resource/XMLElement.h>
#include <Urho3D/Graphics/Technique.h>
#include <Urho3D/Graphics/Technique.h>
#include <Urho3D/Scene/ValueAnimation.h>
#include "ValueAnimation.h"
#include <Urho3D/Graphics/Texture.h>
#include <Urho3D/Graphics/Texture3D.h>
#include <Urho3D/Graphics/Light.h>
#include <Urho3D/Scene/AnimationDefs.h>
#include <Urho3D/Graphics/GraphicsDefs.h>
#include <Urho3D/Graphics/GraphicsDefs.h>
#include <Urho3D/Resource/XMLFile.h>

namespace UrhoBackend {


MaterialParam::MaterialParam(Material^ mat)
{
    material_ = mat;
    value_ = gcnew Vector4(0, 0, 0, 0);
}

MaterialParam::MaterialParam(Material^ mat, System::String^ name)
{
    name_ = name;
    material_ = mat;
    value_ = gcnew Vector4(material_->material_->GetShaderParameter(ToCString(name_)).GetVector4());
}

System::String^ MaterialParam::Name::get() {
    return name_;
}

void MaterialParam::Name::set(System::String^ value)
{
    if (!name_->Equals(value))
    {
        material_->material_->RemoveShaderParameter(ToCString(name_));
        name_ = value;
        material_->material_->SetShaderParameter(ToCString(name_), Urho3D::Variant(value_->ToVector4()));
    }
}

Vector4^ MaterialParam::Value::get()
{
    return value_;
}

void MaterialParam::Value::set(Vector4^ value)
{
    value_->x = value->x;
    value_->y = value->y;
    value_->z = value->z;
    value_->w = value->w;
    if (!System::String::IsNullOrWhiteSpace(name_))
        material_->material_->SetShaderParameter(ToCString(name_), Urho3D::Variant(value_->ToVector4()));
}

// MATERIAL TECHNIQUE
MaterialTechnique::MaterialTechnique(Material^ mat, int index) :
    index_(index)
{
    material_ = mat;
}

MaterialTechnique::~MaterialTechnique()
{
}

ResourceRef^ MaterialTechnique::Technique::get() {
    const Urho3D::TechniqueEntry techEntry = material_->material_->GetTechniqueEntry(index_);
    if (techEntry.technique_.Null())
        return gcnew UrhoBackend::ResourceRef("Technique", "");

    return gcnew UrhoBackend::ResourceRef(
        "Technique",
        gcnew System::String(techEntry.technique_->GetName().CString()));
}

void MaterialTechnique::Technique::set(ResourceRef^ value)
{
    Urho3D::TechniqueEntry techEntry = material_->material_->GetTechniqueEntry(index_);
    Urho3D::ResourceCache* cache = material_->material_->GetSubsystem<Urho3D::ResourceCache>();
    Urho3D::Resource* resource = cache->GetResource(ToCString(value->GetResourceType()), ToCString(value->GetName()));
    material_->material_->SetTechnique(index_, (Urho3D::Technique*)resource, quality_, lodDist_);
}

float MaterialTechnique::LODDistance::get()
{
    return lodDist_;
}

void MaterialTechnique::LODDistance::set(float value)
{
    lodDist_ = value;
}

float MaterialTechnique::Quality::get()
{
    return 0.0f;
}

void MaterialTechnique::Quality::set(float value)
{

}

Material::Material(Urho3D::Material* fromUrho) : UObject(fromUrho) 
{ 
    params_ = gcnew UrhoBackend::ParentedList<MaterialParam^>(this);
    techniques_ = gcnew UrhoBackend::ParentedList<MaterialTechnique^>(this);
    material_ = fromUrho; 

    const Urho3D::HashMap<Urho3D::StringHash,Urho3D::MaterialShaderParameter>& params = fromUrho->GetShaderParameters();
    if (params.Size() > 0)
    {
        for (Urho3D::HashMap<Urho3D::StringHash, Urho3D::MaterialShaderParameter>::ConstIterator cit = params.Begin(); cit != params.End(); ++cit)
            params_->Add(gcnew MaterialParam(this, gcnew System::String(cit->second_.name_.CString())));
    }

    const Urho3D::Vector<Urho3D::TechniqueEntry>& techniques = fromUrho->GetTechniques();
    for (unsigned i = 0; i < techniques.Size(); ++i)
        techniques_->Add(gcnew MaterialTechnique(this, i));
}
Material::Material(System::IntPtr^ ptr) : Material((Urho3D::Material*)ptr->ToPointer()) { }

CullMode Material::cullMode::get() { return (UrhoBackend::CullMode)material_->GetCullMode();}
void Material::cullMode::set(CullMode value) { material_->SetCullMode((Urho3D::CullMode)value); PropertyChange("cullMode"); }

CullMode Material::shadowCullMode::get() { return (UrhoBackend::CullMode)material_->GetShadowCullMode(); }
void Material::shadowCullMode::set(CullMode value) { material_->SetShadowCullMode((Urho3D::CullMode)value); PropertyChange("shadowCullMode"); }

FillMode Material::fillMode::get() { return (UrhoBackend::FillMode)material_->GetFillMode(); }
void Material::fillMode::set(FillMode value) { material_->SetFillMode((Urho3D::FillMode)value); PropertyChange("fillMode"); }

float Material::ConstantBias::get() { return material_->GetDepthBias().constantBias_; }
void Material::ConstantBias::set(float value) { 
    Urho3D::BiasParameters bias = material_->GetDepthBias();
    bias.constantBias_ = value;
    material_->SetDepthBias(bias);
    PropertyChange("ConstantBias"); 
}

float Material::SlopeBias::get() { return material_->GetDepthBias().slopeScaledBias_; }
void Material::SlopeBias::set(float value) {
    Urho3D::BiasParameters bias = material_->GetDepthBias();
    bias.slopeScaledBias_ = value;
    material_->SetDepthBias(bias);
    PropertyChange("SlopeBias");
}

Scene^ Material::scene::get() { return gcnew UrhoBackend::Scene(material_->GetScene()); }
void Material::scene::set(Scene^ value) { material_->SetScene(value->scene_); }

void Material::SetUVTransform(UrhoBackend::Vector2^ A, float B, UrhoBackend::Vector2^ C)  {  material_->SetUVTransform(A->ToVector2(), B, C->ToVector2()); }

void Material::SetUVTransform(UrhoBackend::Vector2^ A, float B, float C)  {  material_->SetUVTransform(A->ToVector2(), B, C); }

void Material::RemoveShaderParameter(System::String^ A)  {  material_->RemoveShaderParameter(Urho3D::String(ToCString(A))); }

void Material::SortTechniques()  {  material_->SortTechniques(); }

void Material::SetShaderParameterAnimation(System::String^ A, ValueAnimation^ B, WrapMode wrapMod, float spee)  {  material_->SetShaderParameterAnimation(Urho3D::String(ToCString(A)), B->valueanimation_, (Urho3D::WrapMode)wrapMod, spee); }

ValueAnimation^ Material::GetShaderParameterAnimation(System::String^ A)  { return  gcnew UrhoBackend::ValueAnimation(material_->GetShaderParameterAnimation(Urho3D::String(ToCString(A)))); }

void Material::SetShaderParameterAnimationWrapMode(System::String^ A, WrapMode B)  {  material_->SetShaderParameterAnimationWrapMode(Urho3D::String(ToCString(A)), (Urho3D::WrapMode)B); }

WrapMode Material::GetShaderParameterAnimationWrapMode(System::String^ A)  { return  (UrhoBackend::WrapMode)material_->GetShaderParameterAnimationWrapMode(Urho3D::String(ToCString(A))); }

void Material::SetShaderParameterAnimationSpeed(System::String^ A, float B)  {  material_->SetShaderParameterAnimationSpeed(Urho3D::String(ToCString(A)), B); }

float Material::GetShaderParameterAnimationSpeed(System::String^ A)  { return  material_->GetShaderParameterAnimationSpeed(Urho3D::String(ToCString(A))); }

ResourceRef^ Material::GetTextureResource(TextureUnit unit)
{
    if (Urho3D::Texture* texture = material_->GetTexture((Urho3D::TextureUnit)unit))
        return gcnew ResourceRef(gcnew System::String(texture->GetTypeName().CString()), gcnew System::String(texture->GetName().CString()));
    return gcnew ResourceRef("Texture", "");
}

void Material::SetTextureResource(TextureUnit unit, ResourceRef^ ref)
{
    Urho3D::ResourceCache* cache = material_->GetSubsystem<Urho3D::ResourceCache>();
    Urho3D::Texture* res = cache->GetResource<Urho3D::Texture2D>(ToCString(ref->GetName()));
    if (res == 0)
        res = cache->GetResource<Urho3D::Texture3D>(ToCString(ref->GetName()));
    material_->SetTexture((Urho3D::TextureUnit)unit, res);
}

MaterialParam^ Material::InsertParam()
{
    MaterialParam^ param = gcnew MaterialParam(this);
    params_->Add(param);
    return param;
}

MaterialTechnique^ Material::InsertTechnique()
{
    MaterialTechnique^ ret = gcnew MaterialTechnique(this, techniques_->Count);
    techniques_->Add(ret);
    return ret;
}

void Material::RemoveParam(unsigned index)
{
    material_->RemoveShaderParameter(ToCString(params_[index]->Name));
    params_->RemoveAt(index);
}

void Material::RemoveTechnique(unsigned index)
{
    material_->SetTechnique(index, 0);
    techniques_->RemoveAt(index);
}

XMLFile^ Material::Save()
{
    Urho3D::XMLFile* file = new Urho3D::XMLFile(material_->GetContext());
    material_->Save(file->CreateRoot("material"));
    return gcnew XMLFile(file);
}

}
