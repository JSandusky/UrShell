//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Spline.h"

#include <Urho3D/Core/Spline.h>
#include <Urho3D/Core/Spline.h>

namespace UrhoBackend {

Spline::Spline(Urho3D::Spline fromUrho) { spline_ = new Urho3D::Spline(); *spline_ = fromUrho; }
Spline::Spline(System::IntPtr^ ptr) : Spline(*((Urho3D::Spline*)ptr->ToPointer())) { }
Spline::~Spline() { delete spline_; }
InterpolationMode Spline::interpolationMode::get() { return (UrhoBackend::InterpolationMode)spline_->GetInterpolationMode(); }
void Spline::interpolationMode::set(InterpolationMode value) { spline_->SetInterpolationMode((Urho3D::InterpolationMode)value); }

Variant^ Spline::knot::get(unsigned A) { return gcnew UrhoBackend::Variant(spline_->GetKnot(A)); }

Spline^ Spline::opAssign(Spline^ A)  { return  gcnew UrhoBackend::Spline(spline_->operator =(*A->spline_)); }

bool Spline::opEquals(Spline^ A)  { return  spline_->operator ==(*A->spline_); }

void Spline::AddKnot(Variant^ A)  {  spline_->AddKnot(*A->variant_); }

void Spline::AddKnot(Variant^ A, unsigned B)  {  spline_->AddKnot(*A->variant_, B); }

void Spline::RemoveKnot()  {  spline_->RemoveKnot(); }

void Spline::RemoveKnot(unsigned A)  {  spline_->RemoveKnot(A); }

void Spline::Clear()  {  spline_->Clear(); }

Variant^ Spline::GetPoint(float A)  { return  gcnew UrhoBackend::Variant(spline_->GetPoint(A)); }

}
