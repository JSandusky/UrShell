//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "SoundSource.h"

#include <Urho3D/Audio/SoundSource.h>
#include <Urho3D/Audio/Sound.h>
#include "Sound.h"

namespace UrhoBackend {

SoundSource::SoundSource(Urho3D::SoundSource* fromUrho) : Component(fromUrho) { soundsource_ = fromUrho; }
SoundSource::SoundSource(System::IntPtr^ ptr) : SoundSource((Urho3D::SoundSource*)ptr->ToPointer()) { }

System::String^ SoundSource::soundType::get() { return gcnew System::String(soundsource_->GetSoundType().CString()); }
void SoundSource::soundType::set(System::String^ value) { soundsource_->SetSoundType(Urho3D::String(ToCString(value))); }

float SoundSource::frequency::get() { return soundsource_->GetFrequency(); }
void SoundSource::frequency::set(float value) { soundsource_->SetFrequency(value); }

float SoundSource::gain::get() { return soundsource_->GetGain(); }
void SoundSource::gain::set(float value) { soundsource_->SetGain(value); }

float SoundSource::panning::get() { return soundsource_->GetPanning(); }
void SoundSource::panning::set(float value) { soundsource_->SetPanning(value); }

Sound^ SoundSource::sound::get() { return gcnew UrhoBackend::Sound(soundsource_->GetSound()); }
float SoundSource::timePosition::get() { return soundsource_->GetTimePosition(); }
float SoundSource::attenuation::get() { return soundsource_->GetAttenuation(); }
bool SoundSource::autoRemove::get() { return soundsource_->GetAutoRemove(); }
void SoundSource::autoRemove::set(bool value) { soundsource_->SetAutoRemove(value); }

bool SoundSource::playing::get() { return soundsource_->IsPlaying(); }
void SoundSource::Play(Sound^ A)  {  soundsource_->Play(A->sound_); }

void SoundSource::Play(Sound^ A, float B)  {  soundsource_->Play(A->sound_, B); }

void SoundSource::Play(Sound^ A, float B, float C)  {  soundsource_->Play(A->sound_, B, C); }

void SoundSource::Play(Sound^ A, float B, float C, float D)  {  soundsource_->Play(A->sound_, B, C, D); }

void SoundSource::Stop()  {  soundsource_->Stop(); }

}
