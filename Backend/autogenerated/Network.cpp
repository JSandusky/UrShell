//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Network.h"

#include <Urho3D/Network/Network.h>
#include <Urho3D/IO/VectorBuffer.h>
#include "VectorBuffer.h"
#include <Urho3D/IO/PackageFile.h>
#include "PackageFile.h"
#include <Urho3D/Network/Connection.h>
#include "Connection.h"

namespace UrhoBackend {

Network::Network(Urho3D::Network* fromUrho) : Object(fromUrho) { network_ = fromUrho; }
Network::Network(System::IntPtr^ ptr) : Network((Urho3D::Network*)ptr->ToPointer()) { }

int Network::updateFps::get() { return network_->GetUpdateFps(); }
void Network::updateFps::set(int value) { network_->SetUpdateFps(value); }

int Network::simulatedLatency::get() { return network_->GetSimulatedLatency(); }
void Network::simulatedLatency::set(int value) { network_->SetSimulatedLatency(value); }

float Network::simulatedPacketLoss::get() { return network_->GetSimulatedPacketLoss(); }
void Network::simulatedPacketLoss::set(float value) { network_->SetSimulatedPacketLoss(value); }

System::String^ Network::packageCacheDir::get() { return gcnew System::String(network_->GetPackageCacheDir().CString()); }
void Network::packageCacheDir::set(System::String^ value) { network_->SetPackageCacheDir(Urho3D::String(ToCString(value))); }

bool Network::serverRunning::get() { return network_->IsServerRunning(); }
Connection^ Network::serverConnection::get() { return gcnew UrhoBackend::Connection(network_->GetServerConnection()); }
bool Network::Connect(System::String^ A, unsigned short B, Scene^ C, UrhoBackend::VariantMap^ identity)  { return  network_->Connect(Urho3D::String(ToCString(A)), B, C->scene_, *identity->map_); }

void Network::Disconnect(int waitMSec)  {  network_->Disconnect(waitMSec); }

bool Network::StartServer(unsigned short A)  { return  network_->StartServer(A); }

void Network::StopServer()  {  network_->StopServer(); }

void Network::BroadcastMessage(int A, bool B, bool C, VectorBuffer^ D, unsigned contentID)  {  network_->BroadcastMessage(A, B, C, *D->vectorbuffer_, contentID); }

void Network::UnregisterAllRemoteEvents()  {  network_->UnregisterAllRemoteEvents(); }

void Network::SendPackageToClients(Scene^ A, PackageFile^ B)  {  network_->SendPackageToClients(A->scene_, B->packagefile_); }

}
