//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "SplinePath.h"

#include <Urho3D/Scene/SplinePath.h>
#include <Urho3D/Core/Spline.h>

namespace UrhoBackend {

SplinePath::SplinePath(Urho3D::SplinePath* fromUrho) : Component(fromUrho) { splinepath_ = fromUrho; }
SplinePath::SplinePath(System::IntPtr^ ptr) : SplinePath((Urho3D::SplinePath*)ptr->ToPointer()) { }

InterpolationMode SplinePath::interpolationMode::get() { return (UrhoBackend::InterpolationMode)splinepath_->GetInterpolationMode(); }
void SplinePath::interpolationMode::set(InterpolationMode value) { splinepath_->SetInterpolationMode((Urho3D::InterpolationMode)value); }

float SplinePath::speed::get() { return splinepath_->GetSpeed(); }
void SplinePath::speed::set(float value) { splinepath_->SetSpeed(value); }

UrhoBackend::Vector3^ SplinePath::position::get() { return gcnew UrhoBackend::Vector3(splinepath_->GetPosition()); }
void SplinePath::position::set(float value) { splinepath_->SetPosition(value); }

Node^ SplinePath::controlledNode::get() { return gcnew UrhoBackend::Node(splinepath_->GetControlledNode()); }
void SplinePath::controlledNode::set(Node^ value) { splinepath_->GetControlledNode(value->node_); }

bool SplinePath::isFinished::get() { return splinepath_->IsFinished(); }
void SplinePath::AddControlPoint(Node point A, unsigned index)  {  splinepath_->AddControlPoint(A, index); }

void SplinePath::RemoveControlPoint(Node point A)  {  splinepath_->RemoveControlPoint(A); }

void SplinePath::ClearControlPoints()  {  splinepath_->ClearControlPoints(); }

UrhoBackend::Vector3^ SplinePath::GetPoint(float A)  { return  gcnew UrhoBackend::Vector3(splinepath_->GetPoint(A)); }

void SplinePath::Move(float A)  {  splinepath_->Move(A); }

void SplinePath::Reset()  {  splinepath_->Reset(); }

}
