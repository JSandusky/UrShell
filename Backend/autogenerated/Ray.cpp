//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Ray.h"

#include <Urho3D/Math/Ray.h>
#include <Urho3D/Math/Plane.h>
#include "Plane.h"
#include <Urho3D/Math/Sphere.h>
#include "Sphere.h"
#include <Urho3D/Math/BoundingBox.h>
#include "BoundingBox.h"
#include <Urho3D/Math/Frustum.h>
#include "Frustum.h"

namespace UrhoBackend {

Ray::Ray(Urho3D::Ray fromUrho) { ray_ = new Urho3D::Ray(); *ray_ = fromUrho; }
Ray::Ray(System::IntPtr^ ptr) : Ray(*((Urho3D::Ray*)ptr->ToPointer())) { }
Ray::~Ray() { delete ray_; }
Ray^ Ray::opAssign(Ray^ A)  { return  gcnew UrhoBackend::Ray(ray_->operator =(*A->ray_)); }

bool Ray::opEquals(Ray^ A)  { return  ray_->operator ==(*A->ray_); }

void Ray::Define(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B)  {  ray_->Define(A->ToVector3(), B->ToVector3()); }

UrhoBackend::Vector3^ Ray::Project(UrhoBackend::Vector3^ A)  { return  gcnew UrhoBackend::Vector3(ray_->Project(A->ToVector3())); }

float Ray::Distance(UrhoBackend::Vector3^ A)  { return  ray_->Distance(A->ToVector3()); }

UrhoBackend::Vector3^ Ray::ClosestPoint(Ray^ A)  { return  gcnew UrhoBackend::Vector3(ray_->ClosestPoint(*A->ray_)); }

float Ray::HitDistance(Plane^ A)  { return  ray_->HitDistance(*A->plane_); }

float Ray::HitDistance(Sphere^ A)  { return  ray_->HitDistance(*A->sphere_); }

float Ray::HitDistance(BoundingBox^ A)  { return  ray_->HitDistance(*A->boundingbox_); }

float Ray::HitDistance(Frustum^ A, bool solidInside)  { return  ray_->HitDistance(*A->frustum_, solidInside); }

float Ray::HitDistance(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B, UrhoBackend::Vector3^ C)  { return  ray_->HitDistance(A->ToVector3(), B->ToVector3(), C->ToVector3()); }

Ray^ Ray::Transformed(UrhoBackend::Matrix3x4^ A)  { return  gcnew UrhoBackend::Ray(ray_->Transformed(A->ToMatrix3x4())); }

UrhoBackend::Vector3^ Ray::origin::get() { return gcnew UrhoBackend::Vector3(ray_->origin_); }
void Ray::origin::set(UrhoBackend::Vector3^ value) { ray_->origin_ = value->ToVector3(); }

UrhoBackend::Vector3^ Ray::direction::get() { return gcnew UrhoBackend::Vector3(ray_->direction_); }
void Ray::direction::set(UrhoBackend::Vector3^ value) { ray_->direction_ = value->ToVector3(); }

}
