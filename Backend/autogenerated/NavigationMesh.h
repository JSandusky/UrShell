//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#pragma once

#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../Attributes.h"

#include "Enumerations.h"

namespace Urho3D {
    class NavigationMesh;
    class BoundingBox;
    class Vector3;
    class IntVector2;
}



namespace UrhoBackend {

    ref class BoundingBox;

    public ref class NavigationMesh : public UrhoBackend::Component {
    public:
        NavigationMesh(Urho3D::NavigationMesh* comp);
        NavigationMesh(System::IntPtr^ ptr);

// Properties
        property int tileSize { int get(); void set(int); }
        property float cellSize { float get(); void set(float); }
        property float cellHeight { float get(); void set(float); }
        property float agentHeight { float get(); void set(float); }
        property float agentRadius { float get(); void set(float); }
        property float agentMaxClimb { float get(); void set(float); }
        property float agentMaxSlope { float get(); void set(float); }
        property float regionMinSize { float get(); void set(float); }
        property float regionMergeSize { float get(); void set(float); }
        property float edgeMaxLength { float get(); void set(float); }
        property float edgeMaxError { float get(); void set(float); }
        property float detailSampleDistance { float get(); void set(float); }
        property float detailSampleMaxError { float get(); void set(float); }
        property UrhoBackend::Vector3^ padding { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property bool initialized { bool get(); }
        property BoundingBox^ boundingBox { BoundingBox^ get(); }
        property BoundingBox^ worldBoundingBox { BoundingBox^ get(); }
        property UrhoBackend::IntVector2^ numTiles { UrhoBackend::IntVector2^ get(); }
// Methods
        bool Build();
        bool Build(BoundingBox^);
        void SetAreaCost(unsigned, float);
        float GetAreaCost(unsigned);
        UrhoBackend::Vector3^ FindNearestPoint(UrhoBackend::Vector3^, UrhoBackend::Vector3^);
        UrhoBackend::Vector3^ MoveAlongSurface(UrhoBackend::Vector3^, UrhoBackend::Vector3^, UrhoBackend::Vector3^, unsigned);
        UrhoBackend::Vector3^ GetRandomPoint();
        UrhoBackend::Vector3^ GetRandomPointInCircle(UrhoBackend::Vector3^, float, UrhoBackend::Vector3^);
        float GetDistanceToWall(UrhoBackend::Vector3^, float, UrhoBackend::Vector3^);
        UrhoBackend::Vector3^ Raycast(UrhoBackend::Vector3^, UrhoBackend::Vector3^, UrhoBackend::Vector3^);
// Fields

        Urho3D::NavigationMesh* navigationmesh_;
    };
}
