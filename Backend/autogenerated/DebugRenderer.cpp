//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "DebugRenderer.h"

#include <Urho3D/Graphics/DebugRenderer.h>
#include <Urho3D/Math/BoundingBox.h>
#include "BoundingBox.h"
#include <Urho3D/Math/Frustum.h>
#include "Frustum.h"
#include <Urho3D/Math/Polyhedron.h>
#include "Polyhedron.h"
#include <Urho3D/Math/Sphere.h>
#include "Sphere.h"
#include <Urho3D/Graphics/Skeleton.h>
#include "Skeleton.h"

namespace UrhoBackend {

DebugRenderer::DebugRenderer(Urho3D::DebugRenderer* fromUrho) : Component(fromUrho) { debugrenderer_ = fromUrho; }
DebugRenderer::DebugRenderer(System::IntPtr^ ptr) : DebugRenderer((Urho3D::DebugRenderer*)ptr->ToPointer()) { }

void DebugRenderer::AddLine(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B, UrhoBackend::Color^ C, bool depthTest)  {  debugrenderer_->AddLine(A->ToVector3(), B->ToVector3(), C->ToColor(), depthTest); }

void DebugRenderer::AddTriangle(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B, UrhoBackend::Vector3^ C, UrhoBackend::Color^ D, bool depthTest)  {  debugrenderer_->AddTriangle(A->ToVector3(), B->ToVector3(), C->ToVector3(), D->ToColor(), depthTest); }

void DebugRenderer::AddNode(Node^ A, float scale, bool depthTest)  {  debugrenderer_->AddNode(A->node_, scale, depthTest); }

void DebugRenderer::AddBoundingBox(BoundingBox^ A, UrhoBackend::Color^ B, bool depthTest)  {  debugrenderer_->AddBoundingBox(*A->boundingbox_, B->ToColor(), depthTest); }

void DebugRenderer::AddFrustum(Frustum^ A, UrhoBackend::Color^ B, bool depthTest)  {  debugrenderer_->AddFrustum(*A->frustum_, B->ToColor(), depthTest); }

void DebugRenderer::AddPolyhedron(Polyhedron^ A, UrhoBackend::Color^ B, bool depthTest)  {  debugrenderer_->AddPolyhedron(*A->polyhedron_, B->ToColor(), depthTest); }

void DebugRenderer::AddSphere(Sphere^ A, UrhoBackend::Color^ B, bool depthTest)  {  debugrenderer_->AddSphere(*A->sphere_, B->ToColor(), depthTest); }

void DebugRenderer::AddSkeleton(Skeleton^ A, UrhoBackend::Color^ B, bool depthTest)  {  debugrenderer_->AddSkeleton(A->skeleton_, B->ToColor(), depthTest); }

}
