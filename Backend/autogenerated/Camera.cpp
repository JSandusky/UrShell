//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Camera.h"

#include <Urho3D/Graphics/Camera.h>
#include <Urho3D/Math/Frustum.h>
#include "Frustum.h"
#include <Urho3D/Math/Ray.h>
#include "Ray.h"
#include <Urho3D/Math/Plane.h>
#include "Plane.h"
#include <Urho3D/Graphics/GraphicsDefs.h>

namespace UrhoBackend {

Camera::Camera(Urho3D::Camera* fromUrho) : Component(fromUrho) { camera_ = fromUrho; }
Camera::Camera(System::IntPtr^ ptr) : Camera((Urho3D::Camera*)ptr->ToPointer()) { }

void Camera::viewOverrideFlags::set(unsigned value) { camera_->SetViewOverrideFlags(value); }

float Camera::nearClip::get() { return camera_->GetNearClip(); }
void Camera::nearClip::set(float value) { camera_->SetNearClip(value); }

float Camera::farClip::get() { return camera_->GetFarClip(); }
void Camera::farClip::set(float value) { camera_->SetFarClip(value); }

float Camera::fov::get() { return camera_->GetFov(); }
void Camera::fov::set(float value) { camera_->SetFov(value); }

float Camera::orthoSize::get() { return camera_->GetOrthoSize(); }
void Camera::orthoSize::set(float value) { camera_->SetOrthoSize(value); }

float Camera::aspectRatio::get() { return camera_->GetAspectRatio(); }
void Camera::aspectRatio::set(float value) { camera_->SetAspectRatio(value); }

float Camera::zoom::get() { return camera_->GetZoom(); }
void Camera::zoom::set(float value) { camera_->SetZoom(value); }

float Camera::lodBias::get() { return camera_->GetLodBias(); }
void Camera::lodBias::set(float value) { camera_->SetLodBias(value); }

bool Camera::orthographic::get() { return camera_->IsOrthographic(); }
void Camera::orthographic::set(bool value) { camera_->SetOrthographic(value); }

bool Camera::autoAspectRatio::get() { return camera_->GetAutoAspectRatio(); }
void Camera::autoAspectRatio::set(bool value) { camera_->SetAutoAspectRatio(value); }

UrhoBackend::Vector2^ Camera::projectionOffset::get() { return gcnew UrhoBackend::Vector2(camera_->GetProjectionOffset()); }
void Camera::projectionOffset::set(UrhoBackend::Vector2^ value) { camera_->SetProjectionOffset(value->ToVector2()); }

bool Camera::useReflection::get() { return camera_->GetUseReflection(); }
void Camera::useReflection::set(bool value) { camera_->SetUseReflection(value); }

Plane^ Camera::reflectionPlane::get() { return gcnew UrhoBackend::Plane(camera_->GetReflectionPlane()); }
void Camera::reflectionPlane::set(Plane^ value) { camera_->SetReflectionPlane(*value->plane_); }

bool Camera::useClipping::get() { return camera_->GetUseClipping(); }
void Camera::useClipping::set(bool value) { camera_->SetUseClipping(value); }

Plane^ Camera::clipPlane::get() { return gcnew UrhoBackend::Plane(camera_->GetClipPlane()); }
void Camera::clipPlane::set(Plane^ value) { camera_->SetClipPlane(*value->plane_); }

unsigned Camera::viewMask::get() { return camera_->GetViewMask(); }
void Camera::viewMask::set(unsigned value) { camera_->SetViewMask(value); }

unsigned Camera::viewOverrideFlags::get() { return camera_->GetViewOverrideFlags(); }
FillMode Camera::fillMode::get() { return (UrhoBackend::FillMode)camera_->GetFillMode(); }
void Camera::fillMode::set(FillMode value) { camera_->SetFillMode((Urho3D::FillMode)value); }

Frustum^ Camera::frustum::get() { return gcnew UrhoBackend::Frustum(camera_->GetFrustum()); }
UrhoBackend::Matrix4^ Camera::projection::get() { return gcnew UrhoBackend::Matrix4(camera_->GetProjection()); }
UrhoBackend::Matrix3x4^ Camera::view::get() { return gcnew UrhoBackend::Matrix3x4(camera_->GetView()); }
Frustum^ Camera::viewSpaceFrustum::get() { return gcnew UrhoBackend::Frustum(camera_->GetViewSpaceFrustum()); }
float Camera::halfViewSize::get() { return camera_->GetHalfViewSize(); }
UrhoBackend::Matrix3x4^ Camera::effectiveWorldTransform::get() { return gcnew UrhoBackend::Matrix3x4(camera_->GetEffectiveWorldTransform()); }
void Camera::SetOrthoSize(UrhoBackend::Vector2^ A)  {  camera_->SetOrthoSize(A->ToVector2()); }

Frustum^ Camera::GetSplitFrustum(float A, float B)  { return  gcnew UrhoBackend::Frustum(camera_->GetSplitFrustum(A, B)); }

Ray^ Camera::GetScreenRay(float A, float B)  { return  gcnew UrhoBackend::Ray(camera_->GetScreenRay(A, B)); }

UrhoBackend::Vector2^ Camera::WorldToScreenPoint(UrhoBackend::Vector3^ A)  { return  gcnew UrhoBackend::Vector2(camera_->WorldToScreenPoint(A->ToVector3())); }

UrhoBackend::Vector3^ Camera::ScreenToWorldPoint(UrhoBackend::Vector3^ A)  { return  gcnew UrhoBackend::Vector3(camera_->ScreenToWorldPoint(A->ToVector3())); }

float Camera::GetDistance(UrhoBackend::Vector3^ A)  { return  camera_->GetDistance(A->ToVector3()); }

float Camera::GetDistanceSquared(UrhoBackend::Vector3^ A)  { return  camera_->GetDistanceSquared(A->ToVector3()); }

}
