//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "RigidBody2D.h"

#include <Urho3D/Urho2D/RigidBody2D.h>
#include <Urho3D/Urho2D/RigidBody2D.h>

namespace UrhoBackend {

RigidBody2D::RigidBody2D(Urho3D::RigidBody2D* fromUrho) : Component(fromUrho) { rigidbody2d_ = fromUrho; }
RigidBody2D::RigidBody2D(System::IntPtr^ ptr) : RigidBody2D((Urho3D::RigidBody2D*)ptr->ToPointer()) { }

BodyType2D RigidBody2D::bodyType::get() { return (UrhoBackend::BodyType2D)rigidbody2d_->GetBodyType(); }
void RigidBody2D::bodyType::set(BodyType2D value) { rigidbody2d_->SetBodyType((Urho3D::BodyType2D)value); }

float RigidBody2D::mass::get() { return rigidbody2d_->GetMass(); }
void RigidBody2D::mass::set(float value) { rigidbody2d_->SetMass(value); }

float RigidBody2D::inertia::get() { return rigidbody2d_->GetInertia(); }
void RigidBody2D::inertia::set(float value) { rigidbody2d_->SetInertia(value); }

UrhoBackend::Vector2^ RigidBody2D::massCenter::get() { return gcnew UrhoBackend::Vector2(rigidbody2d_->GetMassCenter()); }
void RigidBody2D::massCenter::set(UrhoBackend::Vector2^ value) { rigidbody2d_->SetMassCenter(value->ToVector2()); }

bool RigidBody2D::useFixtureMass::get() { return rigidbody2d_->GetUseFixtureMass(); }
void RigidBody2D::useFixtureMass::set(bool value) { rigidbody2d_->SetUseFixtureMass(value); }

float RigidBody2D::linearDamping::get() { return rigidbody2d_->GetLinearDamping(); }
void RigidBody2D::linearDamping::set(float value) { rigidbody2d_->SetLinearDamping(value); }

float RigidBody2D::angularDamping::get() { return rigidbody2d_->GetAngularDamping(); }
void RigidBody2D::angularDamping::set(float value) { rigidbody2d_->SetAngularDamping(value); }

bool RigidBody2D::allowSleep::get() { return rigidbody2d_->IsAllowSleep(); }
void RigidBody2D::allowSleep::set(bool value) { rigidbody2d_->SetAllowSleep(value); }

bool RigidBody2D::fixedRotation::get() { return rigidbody2d_->IsFixedRotation(); }
void RigidBody2D::fixedRotation::set(bool value) { rigidbody2d_->SetFixedRotation(value); }

bool RigidBody2D::bullet::get() { return rigidbody2d_->IsBullet(); }
void RigidBody2D::bullet::set(bool value) { rigidbody2d_->SetBullet(value); }

float RigidBody2D::gravityScale::get() { return rigidbody2d_->GetGravityScale(); }
void RigidBody2D::gravityScale::set(float value) { rigidbody2d_->SetGravityScale(value); }

bool RigidBody2D::awake::get() { return rigidbody2d_->IsAwake(); }
void RigidBody2D::awake::set(bool value) { rigidbody2d_->SetAwake(value); }

UrhoBackend::Vector2^ RigidBody2D::linearVelocity::get() { return gcnew UrhoBackend::Vector2(rigidbody2d_->GetLinearVelocity()); }
void RigidBody2D::linearVelocity::set(UrhoBackend::Vector2^ value) { rigidbody2d_->SetLinearVelocity(value->ToVector2()); }

void RigidBody2D::ApplyForce(UrhoBackend::Vector2^ A, UrhoBackend::Vector2^ B, bool C)  {  rigidbody2d_->ApplyForce(A->ToVector2(), B->ToVector2(), C); }

void RigidBody2D::ApplyForceToCenter(UrhoBackend::Vector2^ A, bool B)  {  rigidbody2d_->ApplyForceToCenter(A->ToVector2(), B); }

void RigidBody2D::ApplyTorque(float torque A, bool B)  {  rigidbody2d_->ApplyTorque(A, B); }

void RigidBody2D::ApplyLinearImpulse(UrhoBackend::Vector2^ A, UrhoBackend::Vector2^ B, bool C)  {  rigidbody2d_->ApplyLinearImpulse(A->ToVector2(), B->ToVector2(), C); }

void RigidBody2D::ApplyAngularImpulse(float A, bool B)  {  rigidbody2d_->ApplyAngularImpulse(A, B); }

}
