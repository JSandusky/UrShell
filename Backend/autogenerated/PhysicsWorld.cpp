//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "PhysicsWorld.h"

#include <Urho3D/Physics/PhysicsWorld.h>
#include <Urho3D/Graphics/Model.h>
#include "Model.h"

namespace UrhoBackend {

PhysicsWorld::PhysicsWorld(Urho3D::PhysicsWorld* fromUrho) : Component(fromUrho) { physicsworld_ = fromUrho; }
PhysicsWorld::PhysicsWorld(System::IntPtr^ ptr) : PhysicsWorld((Urho3D::PhysicsWorld*)ptr->ToPointer()) { }

UrhoBackend::Vector3^ PhysicsWorld::gravity::get() { return gcnew UrhoBackend::Vector3(physicsworld_->GetGravity()); }
void PhysicsWorld::gravity::set(UrhoBackend::Vector3^ value) { physicsworld_->SetGravity(value->ToVector3()); }

int PhysicsWorld::maxSubSteps::get() { return physicsworld_->GetMaxSubSteps(); }
void PhysicsWorld::maxSubSteps::set(int value) { physicsworld_->SetMaxSubSteps(value); }

int PhysicsWorld::numIterations::get() { return physicsworld_->GetNumIterations(); }
void PhysicsWorld::numIterations::set(int value) { physicsworld_->SetNumIterations(value); }

int PhysicsWorld::fps::get() { return physicsworld_->GetFps(); }
void PhysicsWorld::fps::set(int value) { physicsworld_->SetFps(value); }

bool PhysicsWorld::interpolation::get() { return physicsworld_->GetInterpolation(); }
void PhysicsWorld::interpolation::set(bool value) { physicsworld_->SetInterpolation(value); }

bool PhysicsWorld::internalEdge::get() { return physicsworld_->GetInternalEdge(); }
void PhysicsWorld::internalEdge::set(bool value) { physicsworld_->SetInternalEdge(value); }

bool PhysicsWorld::splitImpulse::get() { return physicsworld_->GetSplitImpulse(); }
void PhysicsWorld::splitImpulse::set(bool value) { physicsworld_->SetSplitImpulse(value); }

void PhysicsWorld::Update(float A)  {  physicsworld_->Update(A); }

void PhysicsWorld::UpdateCollisions()  {  physicsworld_->UpdateCollisions(); }

void PhysicsWorld::RemoveCachedGeometry(Model^ A)  {  physicsworld_->RemoveCachedGeometry(A->model_); }

}
