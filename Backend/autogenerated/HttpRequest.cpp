//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "HttpRequest.h"

#include <Urho3D/Math/BoundingBox.h>
#include "BoundingBox.h"
#include <Urho3D/Network/HttpRequest.h>

namespace UrhoBackend {

HttpRequest::HttpRequest(Urho3D::HttpRequest* fromUrho) : RefCounted(fromUrho) { httprequest_ = fromUrho; }
HttpRequest::HttpRequest(System::IntPtr^ ptr) : HttpRequest((Urho3D::HttpRequest*)ptr->ToPointer()) { }

System::String^ HttpRequest::name::get() { return gcnew System::String(httprequest_->GetName().CString()); }
unsigned HttpRequest::checksum::get() { return httprequest_->GetChecksum(); }
unsigned HttpRequest::position::get() { return httprequest_->GetPosition(); }
unsigned HttpRequest::size::get() { return httprequest_->GetSize(); }
bool HttpRequest::eof::get() { return httprequest_->IsEof(); }
System::String^ HttpRequest::url::get() { return gcnew System::String(httprequest_->GetURL().CString()); }
System::String^ HttpRequest::verb::get() { return gcnew System::String(httprequest_->GetVerb().CString()); }
System::String^ HttpRequest::error::get() { return gcnew System::String(httprequest_->GetError().CString()); }
HttpRequestState HttpRequest::state::get() { return (UrhoBackend::HttpRequestState)httprequest_->GetState(); }
unsigned HttpRequest::availableSize::get() { return httprequest_->GetAvailableSize(); }
bool HttpRequest::open::get() { return httprequest_->IsOpen(); }
int HttpRequest::ReadInt()  { return  httprequest_->ReadInt(); }

short HttpRequest::ReadShort()  { return  httprequest_->ReadShort(); }

signed char HttpRequest::ReadByte()  { return  httprequest_->ReadByte(); }

unsigned HttpRequest::ReadUInt()  { return  httprequest_->ReadUInt(); }

unsigned short HttpRequest::ReadUShort()  { return  httprequest_->ReadUShort(); }

unsigned char HttpRequest::ReadUByte()  { return  httprequest_->ReadUByte(); }

bool HttpRequest::ReadBool()  { return  httprequest_->ReadBool(); }

float HttpRequest::ReadFloat()  { return  httprequest_->ReadFloat(); }

UrhoBackend::IntRect^ HttpRequest::ReadIntRect()  { return  gcnew UrhoBackend::IntRect(httprequest_->ReadIntRect()); }

UrhoBackend::IntVector2^ HttpRequest::ReadIntVector2()  { return  gcnew UrhoBackend::IntVector2(httprequest_->ReadIntVector2()); }

UrhoBackend::Vector2^ HttpRequest::ReadVector2()  { return  gcnew UrhoBackend::Vector2(httprequest_->ReadVector2()); }

UrhoBackend::Vector3^ HttpRequest::ReadVector3()  { return  gcnew UrhoBackend::Vector3(httprequest_->ReadVector3()); }

UrhoBackend::Vector3^ HttpRequest::ReadPackedVector3(float A)  { return  gcnew UrhoBackend::Vector3(httprequest_->ReadPackedVector3(A)); }

UrhoBackend::Vector4^ HttpRequest::ReadVector4()  { return  gcnew UrhoBackend::Vector4(httprequest_->ReadVector4()); }

UrhoBackend::Quaternion^ HttpRequest::ReadQuaternion()  { return  gcnew UrhoBackend::Quaternion(httprequest_->ReadQuaternion()); }

UrhoBackend::Quaternion^ HttpRequest::ReadPackedQuaternion()  { return  gcnew UrhoBackend::Quaternion(httprequest_->ReadPackedQuaternion()); }

UrhoBackend::Matrix3^ HttpRequest::ReadMatrix3()  { return  gcnew UrhoBackend::Matrix3(httprequest_->ReadMatrix3()); }

UrhoBackend::Matrix3x4^ HttpRequest::ReadMatrix3x4()  { return  gcnew UrhoBackend::Matrix3x4(httprequest_->ReadMatrix3x4()); }

UrhoBackend::Matrix4^ HttpRequest::ReadMatrix4()  { return  gcnew UrhoBackend::Matrix4(httprequest_->ReadMatrix4()); }

UrhoBackend::Color^ HttpRequest::ReadColor()  { return  gcnew Color(httprequest_->ReadColor()); }

BoundingBox^ HttpRequest::ReadBoundingBox()  { return  gcnew UrhoBackend::BoundingBox(httprequest_->ReadBoundingBox()); }

System::String^ HttpRequest::ReadString()  { return  gcnew System::String(httprequest_->ReadString().CString()); }

System::String^ HttpRequest::ReadFileID()  { return  gcnew System::String(httprequest_->ReadFileID().CString()); }

UrhoBackend::StringHash^ HttpRequest::ReadStringHash()  { return  gcnew UrhoBackend::StringHash(httprequest_->ReadStringHash()); }

Variant^ HttpRequest::ReadVariant()  { return  gcnew UrhoBackend::Variant(httprequest_->ReadVariant()); }

UrhoBackend::VariantMap^ HttpRequest::ReadVariantMap()  { return  gcnew UrhoBackend::VariantMap(httprequest_->ReadVariantMap()); }

unsigned HttpRequest::ReadVLE()  { return  httprequest_->ReadVLE(); }

unsigned HttpRequest::ReadNetID()  { return  httprequest_->ReadNetID(); }

System::String^ HttpRequest::ReadLine()  { return  gcnew System::String(httprequest_->ReadLine().CString()); }

unsigned HttpRequest::Seek(unsigned A)  { return  httprequest_->Seek(A); }

}
