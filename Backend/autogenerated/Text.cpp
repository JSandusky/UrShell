//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Text.h"

#include <Urho3D/Graphics/Texture.h>
#include <Urho3D/UI/Font.h>
#include "Font.h"
#include <Urho3D/UI/UIElement.h>
#include <Urho3D/UI/Text.h>

namespace UrhoBackend {

Text::Text(Urho3D::Text* fromUrho) : UIElement(fromUrho) { text_ = fromUrho; }
Text::Text(System::IntPtr^ ptr) : Text((Urho3D::Text*)ptr->ToPointer()) { }

Font^ Text::font::get() { return gcnew UrhoBackend::Font(text_->GetFont()); }
int Text::fontSize::get() { return text_->GetFontSize(); }
System::String^ Text::text::get() { return gcnew System::String(text_->GetText().CString()); }
void Text::text::set(System::String^ value) { text_->SetText(Urho3D::String(ToCString(value))); }

HorizontalAlignment Text::textAlignment::get() { return (UrhoBackend::HorizontalAlignment)text_->GetTextAlignment(); }
void Text::textAlignment::set(HorizontalAlignment value) { text_->SetTextAlignment((Urho3D::HorizontalAlignment)value); }

float Text::rowSpacing::get() { return text_->GetRowSpacing(); }
void Text::rowSpacing::set(float value) { text_->SetRowSpacing(value); }

bool Text::wordwrap::get() { return text_->GetWordwrap(); }
void Text::wordwrap::set(bool value) { text_->SetWordwrap(value); }

unsigned Text::selectionStart::get() { return text_->GetSelectionStart(); }
unsigned Text::selectionLength::get() { return text_->GetSelectionLength(); }
UrhoBackend::Color^ Text::selectionColor::get() { return gcnew Color(text_->GetSelectionColor()); }
void Text::selectionColor::set(UrhoBackend::Color^ value) { text_->SetSelectionColor(value->ToColor()); }

UrhoBackend::Color^ Text::hoverColor::get() { return gcnew Color(text_->GetHoverColor()); }
void Text::hoverColor::set(UrhoBackend::Color^ value) { text_->SetHoverColor(value->ToColor()); }

TextEffect Text::textEffect::get() { return (UrhoBackend::TextEffect)text_->GetTextEffect(); }
void Text::textEffect::set(TextEffect value) { text_->SetTextEffect((Urho3D::TextEffect)value); }

UrhoBackend::Color^ Text::effectColor::get() { return gcnew Color(text_->GetEffectColor()); }
void Text::effectColor::set(UrhoBackend::Color^ value) { text_->SetEffectColor(value->ToColor()); }

unsigned Text::numRows::get() { return text_->GetNumRows(); }
unsigned Text::numChars::get() { return text_->GetNumChars(); }
int Text::rowWidths::get(unsigned A) { return text_->GetRowWidth(A); }

UrhoBackend::IntVector2^ Text::charPositions::get(unsigned A) { return gcnew UrhoBackend::IntVector2(text_->GetCharPosition(A)); }

UrhoBackend::IntVector2^ Text::charSizes::get(unsigned A) { return gcnew UrhoBackend::IntVector2(text_->GetCharSize(A)); }

int Text::rowHeight::get() { return text_->GetRowHeight(); }
bool Text::SetFont(System::String^ A, int B)  { return  text_->SetFont(Urho3D::String(ToCString(A)), B); }

bool Text::SetFont(Font^ A, int B)  { return  text_->SetFont(A->font_, B); }

void Text::SetSelection(unsigned A, unsigned arg1)  {  text_->SetSelection(A, arg1); }

void Text::ClearSelection()  {  text_->ClearSelection(); }

}
