//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Constraint.h"

#include <Urho3D/Physics/Constraint.h>
#include <Urho3D/Physics/RigidBody.h>
#include "RigidBody.h"
#include <Urho3D/Physics/Constraint.h>

namespace UrhoBackend {

Constraint::Constraint(Urho3D::Constraint* fromUrho) : Component(fromUrho) { constraint_ = fromUrho; }
Constraint::Constraint(System::IntPtr^ ptr) : Constraint((Urho3D::Constraint*)ptr->ToPointer()) { }

ConstraintType Constraint::raintType::get() { return (UrhoBackend::ConstraintType)constraint_->GetConstraintType(); }
void Constraint::raintType::set(ConstraintType value) { constraint_->SetConstraintType((Urho3D::ConstraintType)value); }

UrhoBackend::Vector3^ Constraint::position::get() { return gcnew UrhoBackend::Vector3(constraint_->GetPosition()); }
void Constraint::position::set(UrhoBackend::Vector3^ value) { constraint_->SetPosition(value->ToVector3()); }

UrhoBackend::Quaternion^ Constraint::rotation::get() { return gcnew UrhoBackend::Quaternion(constraint_->GetRotation()); }
void Constraint::rotation::set(UrhoBackend::Quaternion^ value) { constraint_->SetRotation(value->ToQuaternion()); }

void Constraint::axis::set(UrhoBackend::Vector3^ value) { constraint_->SetAxis(value->ToVector3()); }

UrhoBackend::Vector3^ Constraint::otherPosition::get() { return gcnew UrhoBackend::Vector3(constraint_->GetOtherPosition()); }
void Constraint::otherPosition::set(UrhoBackend::Vector3^ value) { constraint_->SetOtherPosition(value->ToVector3()); }

UrhoBackend::Quaternion^ Constraint::otherRotation::get() { return gcnew UrhoBackend::Quaternion(constraint_->GetOtherRotation()); }
void Constraint::otherRotation::set(UrhoBackend::Quaternion^ value) { constraint_->SetOtherRotation(value->ToQuaternion()); }

void Constraint::otherAxis::set(UrhoBackend::Vector3^ value) { constraint_->SetOtherAxis(value->ToVector3()); }

UrhoBackend::Vector3^ Constraint::worldPosition::get() { return gcnew UrhoBackend::Vector3(constraint_->GetWorldPosition()); }
void Constraint::worldPosition::set(UrhoBackend::Vector3^ value) { constraint_->SetWorldPosition(value->ToVector3()); }

UrhoBackend::Vector2^ Constraint::highLimit::get() { return gcnew UrhoBackend::Vector2(constraint_->GetHighLimit()); }
void Constraint::highLimit::set(UrhoBackend::Vector2^ value) { constraint_->SetHighLimit(value->ToVector2()); }

UrhoBackend::Vector2^ Constraint::lowLimit::get() { return gcnew UrhoBackend::Vector2(constraint_->GetLowLimit()); }
void Constraint::lowLimit::set(UrhoBackend::Vector2^ value) { constraint_->SetLowLimit(value->ToVector2()); }

float Constraint::erp::get() { return constraint_->GetERP(); }
void Constraint::erp::set(float value) { constraint_->SetERP(value); }

float Constraint::cfm::get() { return constraint_->GetCFM(); }
void Constraint::cfm::set(float value) { constraint_->SetCFM(value); }

bool Constraint::disableCollision::get() { return constraint_->GetDisableCollision(); }
void Constraint::disableCollision::set(bool value) { constraint_->SetDisableCollision(value); }

RigidBody^ Constraint::ownBody::get() { return gcnew UrhoBackend::RigidBody(constraint_->GetOwnBody()); }
RigidBody^ Constraint::otherBody::get() { return gcnew UrhoBackend::RigidBody(constraint_->GetOtherBody()); }
void Constraint::otherBody::set(RigidBody^ value) { constraint_->SetOtherBody(value->rigidbody_); }

}
