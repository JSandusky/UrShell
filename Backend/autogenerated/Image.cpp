//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Image.h"

#include <Urho3D/Resource/Image.h>
#include <Urho3D/Resource/Image.h>

namespace UrhoBackend {

Image::Image(Urho3D::Image* fromUrho) : Resource(fromUrho) { image_ = fromUrho; }
Image::Image(System::IntPtr^ ptr) : Image((Urho3D::Image*)ptr->ToPointer()) { }

int Image::width::get() { return image_->GetWidth(); }
int Image::height::get() { return image_->GetHeight(); }
int Image::depth::get() { return image_->GetDepth(); }
unsigned Image::components::get() { return image_->GetComponents(); }
bool Image::compressed::get() { return image_->IsCompressed(); }
CompressedFormat Image::compressedFormat::get() { return (UrhoBackend::CompressedFormat)image_->GetCompressedFormat(); }
unsigned Image::numCompressedLevels::get() { return image_->GetNumCompressedLevels(); }
bool Image::SetSize(int A, int B, unsigned C)  { return  image_->SetSize(A, B, C); }

bool Image::SetSize(int A, int B, int C, unsigned D)  { return  image_->SetSize(A, B, C, D); }

void Image::SetPixel(int A, int B, UrhoBackend::Color^ C)  {  image_->SetPixel(A, B, C->ToColor()); }

void Image::SetPixel(int A, int B, int C, UrhoBackend::Color^ D)  {  image_->SetPixel(A, B, C, D->ToColor()); }

void Image::SetPixelInt(int A, int B, unsigned C)  {  image_->SetPixelInt(A, B, C); }

void Image::SetPixelInt(int A, int B, int C, unsigned D)  {  image_->SetPixelInt(A, B, C, D); }

bool Image::FlipHorizontal()  { return  image_->FlipHorizontal(); }

bool Image::FlipVertical()  { return  image_->FlipVertical(); }

bool Image::Resize(int A, int B)  { return  image_->Resize(A, B); }

void Image::Clear(UrhoBackend::Color^ A)  {  image_->Clear(A->ToColor()); }

void Image::ClearInt(unsigned A)  {  image_->ClearInt(A); }

void Image::SaveBMP(System::String^ A)  {  image_->SaveBMP(Urho3D::String(ToCString(A))); }

void Image::SavePNG(System::String^ A)  {  image_->SavePNG(Urho3D::String(ToCString(A))); }

void Image::SaveTGA(System::String^ A)  {  image_->SaveTGA(Urho3D::String(ToCString(A))); }

void Image::SaveJPG(System::String^ A, int B)  {  image_->SaveJPG(Urho3D::String(ToCString(A)), B); }

UrhoBackend::Color^ Image::GetPixel(int A, int B)  { return  gcnew Color(image_->GetPixel(A, B)); }

UrhoBackend::Color^ Image::GetPixel(int A, int B, int C)  { return  gcnew Color(image_->GetPixel(A, B, C)); }

unsigned Image::GetPixelInt(int A, int B)  { return  image_->GetPixelInt(A, B); }

unsigned Image::GetPixelInt(int A, int B, int C)  { return  image_->GetPixelInt(A, B, C); }

UrhoBackend::Color^ Image::GetPixelBilinear(float A, float B)  { return  gcnew Color(image_->GetPixelBilinear(A, B)); }

UrhoBackend::Color^ Image::GetPixelTrilinear(float A, float B, float C)  { return  gcnew Color(image_->GetPixelTrilinear(A, B, C)); }

Image^ Image::GetSubimage(UrhoBackend::IntRect^ A)  { return  gcnew UrhoBackend::Image(image_->GetSubimage(A->ToIntRect())); }

}
