//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "File.h"

#include <Urho3D/IO/File.h>
#include <Urho3D/Math/BoundingBox.h>
#include "BoundingBox.h"
#include <Urho3D/IO/File.h>

namespace UrhoBackend {

File::File(Urho3D::File* fromUrho) : Object(fromUrho) { file_ = fromUrho; }
File::File(System::IntPtr^ ptr) : File((Urho3D::File*)ptr->ToPointer()) { }

FileMode File::mode::get() { return (UrhoBackend::FileMode)file_->GetMode(); }
bool File::open::get() { return file_->IsOpen(); }
bool File::packaged::get() { return file_->IsPackaged(); }
System::String^ File::name::get() { return gcnew System::String(file_->GetName().CString()); }
unsigned File::checksum::get() { return file_->GetChecksum(); }
unsigned File::position::get() { return file_->GetPosition(); }
unsigned File::size::get() { return file_->GetSize(); }
bool File::eof::get() { return file_->IsEof(); }
bool File::Open(System::String^ A, FileMode mode)  { return  file_->Open(Urho3D::String(ToCString(A)), (Urho3D::FileMode)mode); }

void File::Close()  {  file_->Close(); }

bool File::WriteInt(int A)  { return  file_->WriteInt(A); }

bool File::WriteShort(short A)  { return  file_->WriteShort(A); }

bool File::WriteByte(char A)  { return  file_->WriteByte(A); }

bool File::WriteUInt(unsigned A)  { return  file_->WriteUInt(A); }

bool File::WriteUShort(unsigned short A)  { return  file_->WriteUShort(A); }

bool File::WriteUByte(unsigned char A)  { return  file_->WriteUByte(A); }

bool File::WriteBool(bool A)  { return  file_->WriteBool(A); }

bool File::WriteFloat(float A)  { return  file_->WriteFloat(A); }

bool File::WriteIntRect(UrhoBackend::IntRect^ A)  { return  file_->WriteIntRect(A->ToIntRect()); }

bool File::WriteIntVector2(UrhoBackend::IntVector2^ A)  { return  file_->WriteIntVector2(A->ToIntVector2()); }

bool File::WriteVector2(UrhoBackend::Vector2^ A)  { return  file_->WriteVector2(A->ToVector2()); }

bool File::WriteVector3(UrhoBackend::Vector3^ A)  { return  file_->WriteVector3(A->ToVector3()); }

bool File::WritePackedVector3(UrhoBackend::Vector3^ A, float B)  { return  file_->WritePackedVector3(A->ToVector3(), B); }

bool File::WriteVector4(UrhoBackend::Vector4^ A)  { return  file_->WriteVector4(A->ToVector4()); }

bool File::WriteQuaternion(UrhoBackend::Quaternion^ A)  { return  file_->WriteQuaternion(A->ToQuaternion()); }

bool File::WritePackedQuaternion(UrhoBackend::Quaternion^ A)  { return  file_->WritePackedQuaternion(A->ToQuaternion()); }

bool File::WriteMatrix3(UrhoBackend::Matrix3^ A)  { return  file_->WriteMatrix3(A->ToMatrix3()); }

bool File::WriteMatrix3x4(UrhoBackend::Matrix3x4^ A)  { return  file_->WriteMatrix3x4(A->ToMatrix3x4()); }

bool File::WriteMatrix4(UrhoBackend::Matrix4^ A)  { return  file_->WriteMatrix4(A->ToMatrix4()); }

bool File::WriteColor(UrhoBackend::Color^ A)  { return  file_->WriteColor(A->ToColor()); }

bool File::WriteBoundingBox(BoundingBox^ A)  { return  file_->WriteBoundingBox(*A->boundingbox_); }

bool File::WriteString(System::String^ A)  { return  file_->WriteString(Urho3D::String(ToCString(A))); }

bool File::WriteFileID(System::String^ A)  { return  file_->WriteFileID(Urho3D::String(ToCString(A))); }

bool File::WriteStringHash(UrhoBackend::StringHash^ A)  { return  file_->WriteStringHash(A->ToStringHash()); }

bool File::WriteVariant(Variant^ A)  { return  file_->WriteVariant(*A->variant_); }

bool File::WriteVariantMap(UrhoBackend::VariantMap^ A)  { return  file_->WriteVariantMap(*A->map_); }

bool File::WriteVLE(unsigned A)  { return  file_->WriteVLE(A); }

bool File::WriteNetID(unsigned A)  { return  file_->WriteNetID(A); }

bool File::WriteLine(System::String^ A)  { return  file_->WriteLine(Urho3D::String(ToCString(A))); }

int File::ReadInt()  { return  file_->ReadInt(); }

short File::ReadShort()  { return  file_->ReadShort(); }

signed char File::ReadByte()  { return  file_->ReadByte(); }

unsigned File::ReadUInt()  { return  file_->ReadUInt(); }

unsigned short File::ReadUShort()  { return  file_->ReadUShort(); }

unsigned char File::ReadUByte()  { return  file_->ReadUByte(); }

bool File::ReadBool()  { return  file_->ReadBool(); }

float File::ReadFloat()  { return  file_->ReadFloat(); }

UrhoBackend::IntRect^ File::ReadIntRect()  { return  gcnew UrhoBackend::IntRect(file_->ReadIntRect()); }

UrhoBackend::IntVector2^ File::ReadIntVector2()  { return  gcnew UrhoBackend::IntVector2(file_->ReadIntVector2()); }

UrhoBackend::Vector2^ File::ReadVector2()  { return  gcnew UrhoBackend::Vector2(file_->ReadVector2()); }

UrhoBackend::Vector3^ File::ReadVector3()  { return  gcnew UrhoBackend::Vector3(file_->ReadVector3()); }

UrhoBackend::Vector3^ File::ReadPackedVector3(float A)  { return  gcnew UrhoBackend::Vector3(file_->ReadPackedVector3(A)); }

UrhoBackend::Vector4^ File::ReadVector4()  { return  gcnew UrhoBackend::Vector4(file_->ReadVector4()); }

UrhoBackend::Quaternion^ File::ReadQuaternion()  { return  gcnew UrhoBackend::Quaternion(file_->ReadQuaternion()); }

UrhoBackend::Quaternion^ File::ReadPackedQuaternion()  { return  gcnew UrhoBackend::Quaternion(file_->ReadPackedQuaternion()); }

UrhoBackend::Matrix3^ File::ReadMatrix3()  { return  gcnew UrhoBackend::Matrix3(file_->ReadMatrix3()); }

UrhoBackend::Matrix3x4^ File::ReadMatrix3x4()  { return  gcnew UrhoBackend::Matrix3x4(file_->ReadMatrix3x4()); }

UrhoBackend::Matrix4^ File::ReadMatrix4()  { return  gcnew UrhoBackend::Matrix4(file_->ReadMatrix4()); }

UrhoBackend::Color^ File::ReadColor()  { return  gcnew Color(file_->ReadColor()); }

BoundingBox^ File::ReadBoundingBox()  { return  gcnew UrhoBackend::BoundingBox(file_->ReadBoundingBox()); }

System::String^ File::ReadString()  { return  gcnew System::String(file_->ReadString().CString()); }

System::String^ File::ReadFileID()  { return  gcnew System::String(file_->ReadFileID().CString()); }

UrhoBackend::StringHash^ File::ReadStringHash()  { return  gcnew UrhoBackend::StringHash(file_->ReadStringHash()); }

Variant^ File::ReadVariant()  { return  gcnew UrhoBackend::Variant(file_->ReadVariant()); }

UrhoBackend::VariantMap^ File::ReadVariantMap()  { return  gcnew UrhoBackend::VariantMap(file_->ReadVariantMap()); }

unsigned File::ReadVLE()  { return  file_->ReadVLE(); }

unsigned File::ReadNetID()  { return  file_->ReadNetID(); }

System::String^ File::ReadLine()  { return  gcnew System::String(file_->ReadLine().CString()); }

unsigned File::Seek(unsigned A)  { return  file_->Seek(A); }

}
