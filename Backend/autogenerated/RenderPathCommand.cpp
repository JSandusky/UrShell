//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "RenderPathCommand.h"

#include <Urho3D/Graphics/RenderPath.h>
#include <Urho3D/Graphics/GraphicsDefs.h>
#include <Urho3D/Graphics/GraphicsDefs.h>
#include <Urho3D/Graphics/RenderPath.h>
#include <Urho3D/Graphics/RenderPath.h>

namespace UrhoBackend {

RenderPathCommand::RenderPathCommand(Urho3D::RenderPathCommand fromUrho) { renderpathcommand_ = new Urho3D::RenderPathCommand(); *renderpathcommand_ = fromUrho; }
RenderPathCommand::RenderPathCommand(System::IntPtr^ ptr) : RenderPathCommand(*((Urho3D::RenderPathCommand*)ptr->ToPointer())) { }
RenderPathCommand::~RenderPathCommand() { delete renderpathcommand_; }
System::String^ RenderPathCommand::textureNames::get(TextureUnit A) { return gcnew System::String(renderpathcommand_->GetTextureName((Urho3D::TextureUnit)A).CString()); }

void RenderPathCommand::textureNames::set(TextureUnit A, System::String^ B) { renderpathcommand_->SetTextureName((Urho3D::TextureUnit)A, Urho3D::String(ToCString(B))); }

Variant^ RenderPathCommand::shaderParameters::get(System::String^ A) { return gcnew UrhoBackend::Variant(renderpathcommand_->GetShaderParameter(Urho3D::String(ToCString(A)))); }

void RenderPathCommand::shaderParameters::set(System::String^ A, Variant^ B) { renderpathcommand_->SetShaderParameter(Urho3D::String(ToCString(A)), *B->variant_); }

unsigned RenderPathCommand::numOutputs::get() { return renderpathcommand_->GetNumOutputs(); }
void RenderPathCommand::numOutputs::set(unsigned value) { renderpathcommand_->SetNumOutputs(value); }

System::String^ RenderPathCommand::outputNames::get(unsigned A) { return gcnew System::String(renderpathcommand_->GetOutputName(A).CString()); }

void RenderPathCommand::outputNames::set(unsigned A, System::String^ B) { renderpathcommand_->SetOutputName(A, Urho3D::String(ToCString(B))); }

CubeMapFace RenderPathCommand::outputFaces::get(unsigned A) { return (UrhoBackend::CubeMapFace)renderpathcommand_->GetOutputFace(A); }

void RenderPathCommand::outputFaces::set(unsigned A, CubeMapFace B) { renderpathcommand_->SetOutputFace(A, (Urho3D::CubeMapFace)B); }

System::String^ RenderPathCommand::depthStencilName::get() { return gcnew System::String(renderpathcommand_->GetDepthStencilName().CString()); }
void RenderPathCommand::depthStencilName::set(System::String^ value) { renderpathcommand_->SetDepthStencilName(Urho3D::String(ToCString(value))); }

void RenderPathCommand::RemoveShaderParameter(System::String^ A)  {  renderpathcommand_->RemoveShaderParameter(Urho3D::String(ToCString(A))); }

void RenderPathCommand::SetOutput(unsigned A, System::String^ B, CubeMapFace face)  {  renderpathcommand_->SetOutput(A, Urho3D::String(ToCString(B)), (Urho3D::CubeMapFace)face); }

RenderPathCommand^ RenderPathCommand::opAssign(RenderPathCommand^ A)  { return  gcnew UrhoBackend::RenderPathCommand(renderpathcommand_->operator =(*A->renderpathcommand_)); }

System::String^ RenderPathCommand::tag::get() { return gcnew System::String(renderpathcommand_->tag_.CString()); }
void RenderPathCommand::tag::set(System::String^ value) { renderpathcommand_->tag_ = Urho3D::String(ToCString(value)); }

RenderCommandType RenderPathCommand::type::get() { return (UrhoBackend::RenderCommandType)renderpathcommand_->type_; }
void RenderPathCommand::type::set(RenderCommandType value) { renderpathcommand_->type_ = (Urho3D::RenderCommandType)value; }

RenderCommandSortMode RenderPathCommand::sortMode::get() { return (UrhoBackend::RenderCommandSortMode)renderpathcommand_->sortMode_; }
void RenderPathCommand::sortMode::set(RenderCommandSortMode value) { renderpathcommand_->sortMode_ = (Urho3D::RenderCommandSortMode)value; }

System::String^ RenderPathCommand::pass::get() { return gcnew System::String(renderpathcommand_->pass_.CString()); }
void RenderPathCommand::pass::set(System::String^ value) { renderpathcommand_->pass_ = Urho3D::String(ToCString(value)); }

System::String^ RenderPathCommand::metadata::get() { return gcnew System::String(renderpathcommand_->metadata_.CString()); }
void RenderPathCommand::metadata::set(System::String^ value) { renderpathcommand_->metadata_ = Urho3D::String(ToCString(value)); }

unsigned RenderPathCommand::clearFlags::get() { return renderpathcommand_->clearFlags_; }
void RenderPathCommand::clearFlags::set(unsigned value) { renderpathcommand_->clearFlags_ = value; }

UrhoBackend::Color^ RenderPathCommand::clearColor::get() { return gcnew Color(renderpathcommand_->clearColor_); }
void RenderPathCommand::clearColor::set(UrhoBackend::Color^ value) { renderpathcommand_->clearColor_ = value->ToColor(); }

float RenderPathCommand::clearDepth::get() { return renderpathcommand_->clearDepth_; }
void RenderPathCommand::clearDepth::set(float value) { renderpathcommand_->clearDepth_ = value; }

unsigned RenderPathCommand::clearStencil::get() { return renderpathcommand_->clearStencil_; }
void RenderPathCommand::clearStencil::set(unsigned value) { renderpathcommand_->clearStencil_ = value; }

bool RenderPathCommand::enabled::get() { return renderpathcommand_->enabled_; }
void RenderPathCommand::enabled::set(bool value) { renderpathcommand_->enabled_ = value; }

bool RenderPathCommand::useFogColor::get() { return renderpathcommand_->useFogColor_; }
void RenderPathCommand::useFogColor::set(bool value) { renderpathcommand_->useFogColor_ = value; }

bool RenderPathCommand::markToStencil::get() { return renderpathcommand_->markToStencil_; }
void RenderPathCommand::markToStencil::set(bool value) { renderpathcommand_->markToStencil_ = value; }

bool RenderPathCommand::vertexLights::get() { return renderpathcommand_->vertexLights_; }
void RenderPathCommand::vertexLights::set(bool value) { renderpathcommand_->vertexLights_ = value; }

bool RenderPathCommand::useLitBase::get() { return renderpathcommand_->useLitBase_; }
void RenderPathCommand::useLitBase::set(bool value) { renderpathcommand_->useLitBase_ = value; }

System::String^ RenderPathCommand::vertexShaderName::get() { return gcnew System::String(renderpathcommand_->vertexShaderName_.CString()); }
void RenderPathCommand::vertexShaderName::set(System::String^ value) { renderpathcommand_->vertexShaderName_ = Urho3D::String(ToCString(value)); }

System::String^ RenderPathCommand::pixelShaderName::get() { return gcnew System::String(renderpathcommand_->pixelShaderName_.CString()); }
void RenderPathCommand::pixelShaderName::set(System::String^ value) { renderpathcommand_->pixelShaderName_ = Urho3D::String(ToCString(value)); }

System::String^ RenderPathCommand::vertexShaderDefines::get() { return gcnew System::String(renderpathcommand_->vertexShaderDefines_.CString()); }
void RenderPathCommand::vertexShaderDefines::set(System::String^ value) { renderpathcommand_->vertexShaderDefines_ = Urho3D::String(ToCString(value)); }

System::String^ RenderPathCommand::pixelShaderDefines::get() { return gcnew System::String(renderpathcommand_->pixelShaderDefines_.CString()); }
void RenderPathCommand::pixelShaderDefines::set(System::String^ value) { renderpathcommand_->pixelShaderDefines_ = Urho3D::String(ToCString(value)); }

}
