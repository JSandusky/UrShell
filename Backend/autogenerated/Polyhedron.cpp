//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Polyhedron.h"
#include "BoundingBox.h"
#include "Frustum.h"

#include <Urho3D/Math/Polyhedron.h>
#include <Urho3D/Math/BoundingBox.h>
#include <Urho3D/Math/Frustum.h>

namespace UrhoBackend {

Polyhedron::Polyhedron(Urho3D::Polyhedron fromUrho) { polyhedron_ = new Urho3D::Polyhedron(); *polyhedron_ = fromUrho; }
Polyhedron::Polyhedron(System::IntPtr^ ptr) : Polyhedron(*((Urho3D::Polyhedron*)ptr->ToPointer())) { }
Polyhedron::~Polyhedron() { delete polyhedron_; }
Polyhedron^ Polyhedron::opAssign(Polyhedron^ A)  { polyhedron_->operator =(*A->polyhedron_); return this; }

void Polyhedron::AddFace(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B, UrhoBackend::Vector3^ C)  {  polyhedron_->AddFace(A->ToVector3(), B->ToVector3(), C->ToVector3()); }

void Polyhedron::AddFace(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B, UrhoBackend::Vector3^ C, UrhoBackend::Vector3^ D)  {  polyhedron_->AddFace(A->ToVector3(), B->ToVector3(), C->ToVector3(), D->ToVector3()); }

void Polyhedron::Define(BoundingBox^ A)  {  polyhedron_->Define(*A->boundingbox_); }

void Polyhedron::Define(Frustum^ A)  {  polyhedron_->Define(*A->frustum_); }

void Polyhedron::Clip(BoundingBox^ A)  {  polyhedron_->Clip(*A->boundingbox_); }

void Polyhedron::Clip(Frustum^ A)  {  polyhedron_->Clip(*A->frustum_); }

void Polyhedron::Clear()  {  polyhedron_->Clear(); }

void Polyhedron::Transform(UrhoBackend::Matrix3^ A)  {  polyhedron_->Transform(A->ToMatrix3()); }

void Polyhedron::Transform(UrhoBackend::Matrix3x4^ A)  {  polyhedron_->Transform(A->ToMatrix3x4()); }

Polyhedron^ Polyhedron::Transformed(UrhoBackend::Matrix3^ A)  { return  gcnew UrhoBackend::Polyhedron(polyhedron_->Transformed(A->ToMatrix3())); }

Polyhedron^ Polyhedron::Transformed(UrhoBackend::Matrix3x4^ A)  { return  gcnew UrhoBackend::Polyhedron(polyhedron_->Transformed(A->ToMatrix3x4())); }

}
