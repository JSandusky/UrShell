//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "CollisionShape.h"

#include <Urho3D/Physics/CollisionShape.h>
#include <Urho3D/Graphics/Model.h>
#include "Model.h"
#include <Urho3D/Graphics/CustomGeometry.h>
#include "CustomGeometry.h"
#include <Urho3D/Math/BoundingBox.h>
#include "BoundingBox.h"
#include <Urho3D/Physics/CollisionShape.h>

namespace UrhoBackend {

CollisionShape::CollisionShape(Urho3D::CollisionShape* fromUrho) : Component(fromUrho) { collisionshape_ = fromUrho; }
CollisionShape::CollisionShape(System::IntPtr^ ptr) : CollisionShape((Urho3D::CollisionShape*)ptr->ToPointer()) { }

ShapeType CollisionShape::shapeType::get() { return (UrhoBackend::ShapeType)collisionshape_->GetShapeType(); }
void CollisionShape::shapeType::set(ShapeType value) { collisionshape_->SetShapeType((Urho3D::ShapeType)value); }

UrhoBackend::Vector3^ CollisionShape::size::get() { return gcnew UrhoBackend::Vector3(collisionshape_->GetSize()); }
void CollisionShape::size::set(UrhoBackend::Vector3^ value) { collisionshape_->SetSize(value->ToVector3()); }

UrhoBackend::Vector3^ CollisionShape::position::get() { return gcnew UrhoBackend::Vector3(collisionshape_->GetPosition()); }
void CollisionShape::position::set(UrhoBackend::Vector3^ value) { collisionshape_->SetPosition(value->ToVector3()); }

UrhoBackend::Quaternion^ CollisionShape::rotation::get() { return gcnew UrhoBackend::Quaternion(collisionshape_->GetRotation()); }
void CollisionShape::rotation::set(UrhoBackend::Quaternion^ value) { collisionshape_->SetRotation(value->ToQuaternion()); }

float CollisionShape::margin::get() { return collisionshape_->GetMargin(); }
void CollisionShape::margin::set(float value) { collisionshape_->SetMargin(value); }

Model^ CollisionShape::model::get() { return gcnew UrhoBackend::Model(collisionshape_->GetModel()); }
void CollisionShape::model::set(Model^ value) { collisionshape_->SetModel(value->model_); }

unsigned CollisionShape::lodLevel::get() { return collisionshape_->GetLodLevel(); }
void CollisionShape::lodLevel::set(unsigned value) { collisionshape_->SetLodLevel(value); }

BoundingBox^ CollisionShape::worldBoundingBox::get() { return gcnew UrhoBackend::BoundingBox(collisionshape_->GetWorldBoundingBox()); }
void CollisionShape::SetBox(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ pos, UrhoBackend::Quaternion^ rot)  {  collisionshape_->SetBox(A->ToVector3(), pos->ToVector3(), rot->ToQuaternion()); }

void CollisionShape::SetSphere(float A, UrhoBackend::Vector3^ pos, UrhoBackend::Quaternion^ rot)  {  collisionshape_->SetSphere(A, pos->ToVector3(), rot->ToQuaternion()); }

void CollisionShape::SetStaticPlane(UrhoBackend::Vector3^ pos, UrhoBackend::Quaternion^ rot)  {  collisionshape_->SetStaticPlane(pos->ToVector3(), rot->ToQuaternion()); }

void CollisionShape::SetCylinder(float A, float B, UrhoBackend::Vector3^ pos, UrhoBackend::Quaternion^ rot)  {  collisionshape_->SetCylinder(A, B, pos->ToVector3(), rot->ToQuaternion()); }

void CollisionShape::SetCapsule(float A, float B, UrhoBackend::Vector3^ pos, UrhoBackend::Quaternion^ rot)  {  collisionshape_->SetCapsule(A, B, pos->ToVector3(), rot->ToQuaternion()); }

void CollisionShape::SetCone(float A, float B, UrhoBackend::Vector3^ pos, UrhoBackend::Quaternion^ rot)  {  collisionshape_->SetCone(A, B, pos->ToVector3(), rot->ToQuaternion()); }

void CollisionShape::SetTriangleMesh(Model^ A, unsigned lodLevel, UrhoBackend::Vector3^ scale, UrhoBackend::Vector3^ pos, UrhoBackend::Quaternion^ rot)  {  collisionshape_->SetTriangleMesh(A->model_, lodLevel, scale->ToVector3(), pos->ToVector3(), rot->ToQuaternion()); }

void CollisionShape::SetCustomTriangleMesh(CustomGeometry^ A, UrhoBackend::Vector3^ scale, UrhoBackend::Vector3^ pos, UrhoBackend::Quaternion^ rot)  {  collisionshape_->SetCustomTriangleMesh(A->customgeometry_, scale->ToVector3(), pos->ToVector3(), rot->ToQuaternion()); }

void CollisionShape::SetConvexHull(Model^ A, unsigned lodLevel, UrhoBackend::Vector3^ scale, UrhoBackend::Vector3^ pos, UrhoBackend::Quaternion^ rot)  {  collisionshape_->SetConvexHull(A->model_, lodLevel, scale->ToVector3(), pos->ToVector3(), rot->ToQuaternion()); }

void CollisionShape::SetCustomConvexHull(CustomGeometry^ A, UrhoBackend::Vector3^ scale, UrhoBackend::Vector3^ pos, UrhoBackend::Quaternion^ rot)  {  collisionshape_->SetCustomConvexHull(A->customgeometry_, scale->ToVector3(), pos->ToVector3(), rot->ToQuaternion()); }

void CollisionShape::SetTerrain(unsigned lodLevel)  {  collisionshape_->SetTerrain(lodLevel); }

void CollisionShape::SetTransform(UrhoBackend::Vector3^ A, UrhoBackend::Quaternion^ B)  {  collisionshape_->SetTransform(A->ToVector3(), B->ToQuaternion()); }

}
