//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Serializer.h"

#include <Urho3D/IO/Serializer.h>
#include <Urho3D/Math/BoundingBox.h>
#include "BoundingBox.h"

namespace UrhoBackend {

Serializer::Serializer(Urho3D::Serializer fromUrho) { serializer_ = new Urho3D::Serializer(); *serializer_ = fromUrho; }
Serializer::Serializer(System::IntPtr^ ptr) : Serializer(*((Urho3D::Serializer*)ptr->ToPointer())) { }
Serializer::~Serializer() { delete serializer_; }
bool Serializer::WriteInt(int A)  { return  serializer_->WriteInt(A); }

bool Serializer::WriteShort(short A)  { return  serializer_->WriteShort(A); }

bool Serializer::WriteByte(char A)  { return  serializer_->WriteByte(A); }

bool Serializer::WriteUInt(unsigned A)  { return  serializer_->WriteUInt(A); }

bool Serializer::WriteUShort(unsigned short A)  { return  serializer_->WriteUShort(A); }

bool Serializer::WriteUByte(unsigned char A)  { return  serializer_->WriteUByte(A); }

bool Serializer::WriteBool(bool A)  { return  serializer_->WriteBool(A); }

bool Serializer::WriteFloat(float A)  { return  serializer_->WriteFloat(A); }

bool Serializer::WriteIntRect(UrhoBackend::IntRect^ A)  { return  serializer_->WriteIntRect(A->ToIntRect()); }

bool Serializer::WriteIntVector2(UrhoBackend::IntVector2^ A)  { return  serializer_->WriteIntVector2(A->ToIntVector2()); }

bool Serializer::WriteVector2(UrhoBackend::Vector2^ A)  { return  serializer_->WriteVector2(A->ToVector2()); }

bool Serializer::WriteVector3(UrhoBackend::Vector3^ A)  { return  serializer_->WriteVector3(A->ToVector3()); }

bool Serializer::WritePackedVector3(UrhoBackend::Vector3^ A, float B)  { return  serializer_->WritePackedVector3(A->ToVector3(), B); }

bool Serializer::WriteVector4(UrhoBackend::Vector4^ A)  { return  serializer_->WriteVector4(A->ToVector4()); }

bool Serializer::WriteQuaternion(UrhoBackend::Quaternion^ A)  { return  serializer_->WriteQuaternion(A->ToQuaternion()); }

bool Serializer::WritePackedQuaternion(UrhoBackend::Quaternion^ A)  { return  serializer_->WritePackedQuaternion(A->ToQuaternion()); }

bool Serializer::WriteMatrix3(UrhoBackend::Matrix3^ A)  { return  serializer_->WriteMatrix3(A->ToMatrix3()); }

bool Serializer::WriteMatrix3x4(UrhoBackend::Matrix3x4^ A)  { return  serializer_->WriteMatrix3x4(A->ToMatrix3x4()); }

bool Serializer::WriteMatrix4(UrhoBackend::Matrix4^ A)  { return  serializer_->WriteMatrix4(A->ToMatrix4()); }

bool Serializer::WriteColor(UrhoBackend::Color^ A)  { return  serializer_->WriteColor(A->ToColor()); }

bool Serializer::WriteBoundingBox(BoundingBox^ A)  { return  serializer_->WriteBoundingBox(*A->boundingbox_); }

bool Serializer::WriteString(System::String^ A)  { return  serializer_->WriteString(Urho3D::String(ToCString(A))); }

bool Serializer::WriteFileID(System::String^ A)  { return  serializer_->WriteFileID(Urho3D::String(ToCString(A))); }

bool Serializer::WriteStringHash(UrhoBackend::StringHash^ A)  { return  serializer_->WriteStringHash(A->ToStringHash()); }

bool Serializer::WriteVariant(Variant^ A)  { return  serializer_->WriteVariant(*A->variant_); }

bool Serializer::WriteVariantMap(UrhoBackend::VariantMap^ A)  { return  serializer_->WriteVariantMap(*A->map_); }

bool Serializer::WriteVLE(unsigned A)  { return  serializer_->WriteVLE(A); }

bool Serializer::WriteNetID(unsigned A)  { return  serializer_->WriteNetID(A); }

bool Serializer::WriteLine(System::String^ A)  { return  serializer_->WriteLine(Urho3D::String(ToCString(A))); }

}
