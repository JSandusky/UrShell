//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#pragma once

#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../Attributes.h"

#include "Enumerations.h"

namespace Urho3D {
    class UIElement;
    class XMLElement;
    class XMLFile;
    class String;
    class IntRect;
    class StringHash;
    class Variant;
    class IntVector2;
    class Color;
    class Vector2;
}

#include "Animatable.h"

namespace UrhoBackend {

    ref class XMLElement;
    ref class XMLFile;

    public ref class UIElement : public UrhoBackend::Animatable {
    public:
        UIElement(Urho3D::UIElement* comp);
        UIElement(System::IntPtr^ ptr);

// Properties
        property System::String^ style { System::String^ get(); }
        property System::String^ name { System::String^ get(); void set(System::String^); }
        property UrhoBackend::IntVector2^ position { UrhoBackend::IntVector2^ get(); void set(UrhoBackend::IntVector2^); }
        property UrhoBackend::IntVector2^ size { UrhoBackend::IntVector2^ get(); void set(UrhoBackend::IntVector2^); }
        property int width { int get(); void set(int); }
        property int height { int get(); void set(int); }
        property UrhoBackend::IntVector2^ minSize { UrhoBackend::IntVector2^ get(); void set(UrhoBackend::IntVector2^); }
        property int minWidth { int get(); void set(int); }
        property int minHeight { int get(); void set(int); }
        property UrhoBackend::IntVector2^ maxSize { UrhoBackend::IntVector2^ get(); void set(UrhoBackend::IntVector2^); }
        property int maxWidth { int get(); void set(int); }
        property int maxHeight { int get(); void set(int); }
        property bool fixedSize { bool get(); }
        property bool fixedWidth { bool get(); }
        property bool fixedHeight { bool get(); }
        property HorizontalAlignment horizontalAlignment { HorizontalAlignment get(); void set(HorizontalAlignment); }
        property VerticalAlignment verticalAlignment { VerticalAlignment get(); void set(VerticalAlignment); }
        property UrhoBackend::IntRect^ clipBorder { UrhoBackend::IntRect^ get(); void set(UrhoBackend::IntRect^); }
        property UrhoBackend::Color^ colors[Corner] { UrhoBackend::Color^ get(Corner); void set(Corner, UrhoBackend::Color^); }
        property void colors[Corner, UrhoBackend::Color^] { void set(Corner, UrhoBackend::Color^, void); }
        property int priority { int get(); void set(int); }
        property float opacity { float get(); void set(float); }
        property bool bringToFront { bool get(); void set(bool); }
        property bool bringToBack { bool get(); void set(bool); }
        property bool clipChildren { bool get(); void set(bool); }
        property bool sortChildren { bool get(); void set(bool); }
        property bool useDerivedOpacity { bool get(); void set(bool); }
        property bool enabled { bool get(); void set(bool); }
        property bool enabledSelf { bool get(); }
        property bool editable { bool get(); void set(bool); }
        property bool focus { bool get(); void set(bool); }
        property bool selected { bool get(); void set(bool); }
        property bool visible { bool get(); void set(bool); }
        property bool hovering { bool get(); }
        property bool internal { bool get(); void set(bool); }
        property bool colorGradient { bool get(); }
        property FocusMode focusMode { FocusMode get(); void set(FocusMode); }
        property unsigned dragDropMode { unsigned get(); void set(unsigned); }
        property TraversalMode traversalMode { TraversalMode get(); void set(TraversalMode); }
        property XMLFile^ defaultStyle { void set(XMLFile^); }
        property LayoutMode layoutMode { LayoutMode get(); void set(LayoutMode); }
        property int layoutSpacing { int get(); void set(int); }
        property UrhoBackend::IntRect^ layoutBorder { UrhoBackend::IntRect^ get(); void set(UrhoBackend::IntRect^); }
        property UrhoBackend::Vector2^ layoutFlexScale { UrhoBackend::Vector2^ get(); void set(UrhoBackend::Vector2^); }
        property int indent { int get(); void set(int); }
        property int indentSpacing { int get(); void set(int); }
        property int indentWidth { int get(); }
        property UrhoBackend::IntVector2^ childOffset { UrhoBackend::IntVector2^ get(); }
        property bool elementEventSender { bool get(); void set(bool); }
        property UIElement^ children[unsigned] { UIElement^ get(unsigned); }
        property UIElement^ parent { UIElement^ get(); }
        property UIElement^ root { UIElement^ get(); }
        property int dragButtonCount { int get(); }
        property unsigned dragButtonCombo { unsigned get(); }
        property UrhoBackend::IntVector2^ screenPosition { UrhoBackend::IntVector2^ get(); }
        property UrhoBackend::IntRect^ combinedScreenRect { UrhoBackend::IntRect^ get(); }
        property float derivedOpacity { float get(); }
// Methods
        bool LoadChildXML(XMLElement^, XMLFile^, bool);
        bool SetStyle(XMLElement^);
        bool SetStyle(System::String^, XMLFile^);
        bool SetStyleAuto(XMLFile^);
        void SetPosition(int, int);
        void SetSize(int, int);
        void SetMinSize(int, int);
        void SetMaxSize(int, int);
        void SetFixedSize(int, int);
        void SetFixedWidth(int);
        void SetFixedHeight(int);
        void SetAlignment(HorizontalAlignment, VerticalAlignment);
        void SetLayout(LayoutMode, int, UrhoBackend::IntRect^);
        void UpdateLayout();
        void DisableLayoutUpdate();
        void EnableLayoutUpdate();
        void BringToFront();
        void AddChild(UIElement^);
        void InsertChild(unsigned, UIElement^);
        void RemoveAllChildren();
        void Remove();
        unsigned FindChild(UIElement^);
        void SetParent(UIElement^, unsigned);
        UIElement^ GetChild(System::String^, bool);
        UIElement^ GetChild(UrhoBackend::StringHash^, Variant^, bool);
        UIElement^ GetElementEventSender();
        Variant^ GetVar(UrhoBackend::StringHash^);
        UrhoBackend::IntVector2^ ScreenToElement(UrhoBackend::IntVector2^);
        UrhoBackend::IntVector2^ ElementToScreen(UrhoBackend::IntVector2^);
        bool IsInside(UrhoBackend::IntVector2^, bool);
        bool IsInsideCombined(UrhoBackend::IntVector2^, bool);
        void SetDeepEnabled(bool);
        void ResetDeepEnabled();
        void SetEnabledRecursive(bool);
        unsigned GetNumChildren(bool);
// Fields

        Urho3D::UIElement* uielement_;
    };
}
