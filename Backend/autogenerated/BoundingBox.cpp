//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"

#include <Urho3D/Math/BoundingBox.h>
#include <Urho3D/Math/Frustum.h>
#include <Urho3D/Math/Polyhedron.h>
#include <Urho3D/Math/Sphere.h>

#include "BoundingBox.h"
#include "Sphere.h"
#include "Frustum.h"
#include "Polyhedron.h"

#include <Urho3D/Math/MathDefs.h>

namespace UrhoBackend {

BoundingBox::BoundingBox(Urho3D::BoundingBox fromUrho) { boundingbox_ = new Urho3D::BoundingBox(); *boundingbox_ = fromUrho; }
BoundingBox::BoundingBox(System::IntPtr^ ptr) : BoundingBox(*((Urho3D::BoundingBox*)ptr->ToPointer())) { }
BoundingBox::~BoundingBox() { delete boundingbox_; }
UrhoBackend::Vector3^ BoundingBox::center::get() { return gcnew UrhoBackend::Vector3(boundingbox_->Center()); }
UrhoBackend::Vector3^ BoundingBox::size::get() { return gcnew UrhoBackend::Vector3(boundingbox_->Size()); }
UrhoBackend::Vector3^ BoundingBox::halfSize::get() { return gcnew UrhoBackend::Vector3(boundingbox_->HalfSize()); }
BoundingBox^ BoundingBox::opAssign(BoundingBox^ A)  { boundingbox_->operator =(*A->boundingbox_); return this; }

bool BoundingBox::opEquals(BoundingBox^ A)  { return  boundingbox_->operator ==(*A->boundingbox_); }

void BoundingBox::Define(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B)  {  boundingbox_->Define(A->ToVector3(), B->ToVector3()); }

void BoundingBox::Define(float A, float B)  {  boundingbox_->Define(A, B); }

void BoundingBox::Define(UrhoBackend::Vector3^ A)  {  boundingbox_->Define(A->ToVector3()); }

void BoundingBox::Define(BoundingBox^ A)  {  boundingbox_->Define(*A->boundingbox_); }

void BoundingBox::Define(Frustum^ A)  {  boundingbox_->Define(*A->frustum_); }

void BoundingBox::Define(Polyhedron^ A)  {  boundingbox_->Define(*A->polyhedron_); }

void BoundingBox::Define(Sphere^ A)  {  boundingbox_->Define(*A->sphere_); }

void BoundingBox::Merge(UrhoBackend::Vector3^ A)  {  boundingbox_->Merge(A->ToVector3()); }

void BoundingBox::Merge(BoundingBox^ A)  {  boundingbox_->Merge(*A->boundingbox_); }

void BoundingBox::Merge(Frustum^ A)  {  boundingbox_->Merge(*A->frustum_); }

void BoundingBox::Merge(Polyhedron^ A)  {  boundingbox_->Merge(*A->polyhedron_); }

void BoundingBox::Merge(Sphere^ A)  {  boundingbox_->Merge(*A->sphere_); }

void BoundingBox::Clip(BoundingBox^ A)  {  boundingbox_->Clip(*A->boundingbox_); }

void BoundingBox::Clear()  {  boundingbox_->Clear(); }

void BoundingBox::Transform(UrhoBackend::Matrix3^ A)  {  boundingbox_->Transform(A->ToMatrix3()); }

void BoundingBox::Transform(UrhoBackend::Matrix3x4^ A)  {  boundingbox_->Transform(A->ToMatrix3x4()); }

Intersection BoundingBox::IsInside(UrhoBackend::Vector3^ A)  { return  (UrhoBackend::Intersection)boundingbox_->IsInside(A->ToVector3()); }

Intersection BoundingBox::IsInside(Sphere^ A)  { return  (UrhoBackend::Intersection)boundingbox_->IsInside(*A->sphere_); }

Intersection BoundingBox::IsInside(BoundingBox^ A)  { return  (UrhoBackend::Intersection)boundingbox_->IsInside(*A->boundingbox_); }

BoundingBox^ BoundingBox::Transformed(UrhoBackend::Matrix3^ A)  { return  gcnew UrhoBackend::BoundingBox(boundingbox_->Transformed(A->ToMatrix3())); }

BoundingBox^ BoundingBox::Transformed(UrhoBackend::Matrix3x4^ A)  { return  gcnew UrhoBackend::BoundingBox(boundingbox_->Transformed(A->ToMatrix3x4())); }

Rect^ BoundingBox::Projected(UrhoBackend::Matrix4^ A)  { return  gcnew UrhoBackend::Rect(boundingbox_->Projected(A->ToMatrix4())); }

System::String^ BoundingBox::ToString()  { return  gcnew System::String(boundingbox_->ToString().CString()); }

UrhoBackend::Vector3^ BoundingBox::min::get() { return gcnew UrhoBackend::Vector3(boundingbox_->min_); }
void BoundingBox::min::set(UrhoBackend::Vector3^ value) { boundingbox_->min_ = value->ToVector3(); }

UrhoBackend::Vector3^ BoundingBox::max::get() { return gcnew UrhoBackend::Vector3(boundingbox_->max_); }
void BoundingBox::max::set(UrhoBackend::Vector3^ value) { boundingbox_->max_ = value->ToVector3(); }

bool BoundingBox::defined::get() { return boundingbox_->defined_; }
void BoundingBox::defined::set(bool value) { boundingbox_->defined_ = value; }

}
