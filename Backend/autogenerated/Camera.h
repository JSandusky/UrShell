//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#pragma once

#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../Attributes.h"

#include "Enumerations.h"

namespace Urho3D {
    class Camera;
    class Vector2;
    class Frustum;
    class Ray;
    class Vector3;
    class Plane;
    class Matrix4;
    class Matrix3x4;
}



namespace UrhoBackend {

    ref class Frustum;
    ref class Ray;
    ref class Plane;

    public ref class Camera : public UrhoBackend::Component {
    public:
        Camera(Urho3D::Camera* comp);
        Camera(System::IntPtr^ ptr);

// Properties
        property unsigned viewOverrideFlags { void set(unsigned); }
        property float nearClip { float get(); void set(float); }
        property float farClip { float get(); void set(float); }
        property float fov { float get(); void set(float); }
        property float orthoSize { float get(); void set(float); }
        property float aspectRatio { float get(); void set(float); }
        property float zoom { float get(); void set(float); }
        property float lodBias { float get(); void set(float); }
        property bool orthographic { bool get(); void set(bool); }
        property bool autoAspectRatio { bool get(); void set(bool); }
        property UrhoBackend::Vector2^ projectionOffset { UrhoBackend::Vector2^ get(); void set(UrhoBackend::Vector2^); }
        property bool useReflection { bool get(); void set(bool); }
        property Plane^ reflectionPlane { Plane^ get(); void set(Plane^); }
        property bool useClipping { bool get(); void set(bool); }
        property Plane^ clipPlane { Plane^ get(); void set(Plane^); }
        property unsigned viewMask { unsigned get(); void set(unsigned); }
        property unsigned viewOverrideFlags { unsigned get(); }
        property FillMode fillMode { FillMode get(); void set(FillMode); }
        property Frustum^ frustum { Frustum^ get(); }
        property UrhoBackend::Matrix4^ projection { UrhoBackend::Matrix4^ get(); }
        property UrhoBackend::Matrix3x4^ view { UrhoBackend::Matrix3x4^ get(); }
        property Frustum^ viewSpaceFrustum { Frustum^ get(); }
        property float halfViewSize { float get(); }
        property UrhoBackend::Matrix3x4^ effectiveWorldTransform { UrhoBackend::Matrix3x4^ get(); }
// Methods
        void SetOrthoSize(UrhoBackend::Vector2^);
        Frustum^ GetSplitFrustum(float, float);
        Ray^ GetScreenRay(float, float);
        UrhoBackend::Vector2^ WorldToScreenPoint(UrhoBackend::Vector3^);
        UrhoBackend::Vector3^ ScreenToWorldPoint(UrhoBackend::Vector3^);
        float GetDistance(UrhoBackend::Vector3^);
        float GetDistanceSquared(UrhoBackend::Vector3^);
// Fields

        Urho3D::Camera* camera_;
    };
}
