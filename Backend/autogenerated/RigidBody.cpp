//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "RigidBody.h"

#include <Urho3D/Physics/RigidBody.h>
#include <Urho3D/Physics/RigidBody.h>

namespace UrhoBackend {

RigidBody::RigidBody(Urho3D::RigidBody* fromUrho) : Component(fromUrho) { rigidbody_ = fromUrho; }
RigidBody::RigidBody(System::IntPtr^ ptr) : RigidBody((Urho3D::RigidBody*)ptr->ToPointer()) { }

void RigidBody::gravityOverride::set(UrhoBackend::Vector3^ value) { rigidbody_->SetGravityOverride(value->ToVector3()); }

float RigidBody::mass::get() { return rigidbody_->GetMass(); }
void RigidBody::mass::set(float value) { rigidbody_->SetMass(value); }

UrhoBackend::Vector3^ RigidBody::position::get() { return gcnew UrhoBackend::Vector3(rigidbody_->GetPosition()); }
void RigidBody::position::set(UrhoBackend::Vector3^ value) { rigidbody_->SetPosition(value->ToVector3()); }

UrhoBackend::Quaternion^ RigidBody::rotation::get() { return gcnew UrhoBackend::Quaternion(rigidbody_->GetRotation()); }
void RigidBody::rotation::set(UrhoBackend::Quaternion^ value) { rigidbody_->SetRotation(value->ToQuaternion()); }

UrhoBackend::Vector3^ RigidBody::linearVelocity::get() { return gcnew UrhoBackend::Vector3(rigidbody_->GetLinearVelocity()); }
void RigidBody::linearVelocity::set(UrhoBackend::Vector3^ value) { rigidbody_->SetLinearVelocity(value->ToVector3()); }

UrhoBackend::Vector3^ RigidBody::linearFactor::get() { return gcnew UrhoBackend::Vector3(rigidbody_->GetLinearFactor()); }
void RigidBody::linearFactor::set(UrhoBackend::Vector3^ value) { rigidbody_->SetLinearFactor(value->ToVector3()); }

float RigidBody::linearRestThreshold::get() { return rigidbody_->GetLinearRestThreshold(); }
void RigidBody::linearRestThreshold::set(float value) { rigidbody_->SetLinearRestThreshold(value); }

float RigidBody::linearDamping::get() { return rigidbody_->GetLinearDamping(); }
void RigidBody::linearDamping::set(float value) { rigidbody_->SetLinearDamping(value); }

UrhoBackend::Vector3^ RigidBody::angularVelocity::get() { return gcnew UrhoBackend::Vector3(rigidbody_->GetAngularVelocity()); }
void RigidBody::angularVelocity::set(UrhoBackend::Vector3^ value) { rigidbody_->SetAngularVelocity(value->ToVector3()); }

UrhoBackend::Vector3^ RigidBody::angularFactor::get() { return gcnew UrhoBackend::Vector3(rigidbody_->GetAngularFactor()); }
void RigidBody::angularFactor::set(UrhoBackend::Vector3^ value) { rigidbody_->SetAngularFactor(value->ToVector3()); }

float RigidBody::angularRestThreshold::get() { return rigidbody_->GetAngularRestThreshold(); }
void RigidBody::angularRestThreshold::set(float value) { rigidbody_->SetAngularRestThreshold(value); }

float RigidBody::angularDamping::get() { return rigidbody_->GetAngularDamping(); }
void RigidBody::angularDamping::set(float value) { rigidbody_->SetAngularDamping(value); }

float RigidBody::friction::get() { return rigidbody_->GetFriction(); }
void RigidBody::friction::set(float value) { rigidbody_->SetFriction(value); }

UrhoBackend::Vector3^ RigidBody::anisotropicFriction::get() { return gcnew UrhoBackend::Vector3(rigidbody_->GetAnisotropicFriction()); }
void RigidBody::anisotropicFriction::set(UrhoBackend::Vector3^ value) { rigidbody_->SetAnisotropicFriction(value->ToVector3()); }

float RigidBody::rollingFriction::get() { return rigidbody_->GetRollingFriction(); }
void RigidBody::rollingFriction::set(float value) { rigidbody_->SetRollingFriction(value); }

float RigidBody::restitution::get() { return rigidbody_->GetRestitution(); }
void RigidBody::restitution::set(float value) { rigidbody_->SetRestitution(value); }

float RigidBody::contactProcessingThreshold::get() { return rigidbody_->GetContactProcessingThreshold(); }
void RigidBody::contactProcessingThreshold::set(float value) { rigidbody_->SetContactProcessingThreshold(value); }

float RigidBody::ccdRadius::get() { return rigidbody_->GetCcdRadius(); }
void RigidBody::ccdRadius::set(float value) { rigidbody_->SetCcdRadius(value); }

float RigidBody::ccdMotionThreshold::get() { return rigidbody_->GetCcdMotionThreshold(); }
void RigidBody::ccdMotionThreshold::set(float value) { rigidbody_->SetCcdMotionThreshold(value); }

bool RigidBody::useGravity::get() { return rigidbody_->GetUseGravity(); }
void RigidBody::useGravity::set(bool value) { rigidbody_->SetUseGravity(value); }

UrhoBackend::Vector3^ RigidBody::gravityOverride::get() { return gcnew UrhoBackend::Vector3(rigidbody_->GetGravityOverride()); }
UrhoBackend::Vector3^ RigidBody::centerOfMass::get() { return gcnew UrhoBackend::Vector3(rigidbody_->GetCenterOfMass()); }
bool RigidBody::trigger::get() { return rigidbody_->IsTrigger(); }
void RigidBody::trigger::set(bool value) { rigidbody_->SetTrigger(value); }

bool RigidBody::kinematic::get() { return rigidbody_->IsKinematic(); }
void RigidBody::kinematic::set(bool value) { rigidbody_->SetKinematic(value); }

bool RigidBody::active::get() { return rigidbody_->IsActive(); }
unsigned RigidBody::collisionLayer::get() { return rigidbody_->GetCollisionLayer(); }
void RigidBody::collisionLayer::set(unsigned value) { rigidbody_->SetCollisionLayer(value); }

unsigned RigidBody::collisionMask::get() { return rigidbody_->GetCollisionMask(); }
void RigidBody::collisionMask::set(unsigned value) { rigidbody_->SetCollisionMask(value); }

CollisionEventMode RigidBody::collisionEventMode::get() { return (UrhoBackend::CollisionEventMode)rigidbody_->GetCollisionEventMode(); }
void RigidBody::collisionEventMode::set(CollisionEventMode value) { rigidbody_->SetCollisionEventMode((Urho3D::CollisionEventMode)value); }

void RigidBody::SetTransform(UrhoBackend::Vector3^ A, UrhoBackend::Quaternion^ B)  {  rigidbody_->SetTransform(A->ToVector3(), B->ToQuaternion()); }

void RigidBody::SetCollisionLayerAndMask(unsigned A, unsigned B)  {  rigidbody_->SetCollisionLayerAndMask(A, B); }

void RigidBody::ApplyForce(UrhoBackend::Vector3^ A)  {  rigidbody_->ApplyForce(A->ToVector3()); }

void RigidBody::ApplyForce(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B)  {  rigidbody_->ApplyForce(A->ToVector3(), B->ToVector3()); }

void RigidBody::ApplyTorque(UrhoBackend::Vector3^ A)  {  rigidbody_->ApplyTorque(A->ToVector3()); }

void RigidBody::ApplyImpulse(UrhoBackend::Vector3^ A)  {  rigidbody_->ApplyImpulse(A->ToVector3()); }

void RigidBody::ApplyImpulse(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B)  {  rigidbody_->ApplyImpulse(A->ToVector3(), B->ToVector3()); }

void RigidBody::ApplyTorqueImpulse(UrhoBackend::Vector3^ A)  {  rigidbody_->ApplyTorqueImpulse(A->ToVector3()); }

void RigidBody::ResetForces()  {  rigidbody_->ResetForces(); }

void RigidBody::Activate()  {  rigidbody_->Activate(); }

void RigidBody::ReAddBodyToWorld()  {  rigidbody_->ReAddBodyToWorld(); }

void RigidBody::DisableMassUpdate()  {  rigidbody_->DisableMassUpdate(); }

void RigidBody::EnableMassUpdate()  {  rigidbody_->EnableMassUpdate(); }

UrhoBackend::Vector3^ RigidBody::GetVelocityAtPoint(UrhoBackend::Vector3^ A)  { return  gcnew UrhoBackend::Vector3(rigidbody_->GetVelocityAtPoint(A->ToVector3())); }

}
