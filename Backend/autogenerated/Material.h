//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#pragma once

#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../Attributes.h"

namespace Urho3D {
    class Material;
    class Technique;
    class Vector2;
    class String;
    class Pass;
    class ValueAnimation;
    class Variant;
    class Texture;
    class BiasParameters;
    class Scene;
}

namespace UrhoBackend {

    ref class Material;
    ref class ValueAnimation;

    public ref class MaterialParam
    {
        System::String^ name_;
        Vector4^ value_;
    public:
        MaterialParam(Material^ mat);
        MaterialParam(Material^ mat, System::String^ name);

        property System::String^ Name { System::String^ get(); void set(System::String^); }
        property Vector4^ Value { Vector4^ get(); void set(Vector4^); };

        Material^ material_;
    };

    public ref class MaterialTechnique
    {
        float lodDist_;
        float quality_;
        int index_;
    public:
        MaterialTechnique(Material^ mat, int index);
        ~MaterialTechnique();

        property ResourceRef^ Technique { ResourceRef^ get(); void set(ResourceRef^); }
        property float LODDistance { float get(); void set(float); }
        property float Quality { float get(); void set(float); }

        Material^ material_;
    };

    public ref class Material : public UrhoBackend::UObject {
        UrhoBackend::ParentedList<MaterialParam^>^ params_;
        UrhoBackend::ParentedList<MaterialTechnique^>^ techniques_;
    public:
        Material(Urho3D::Material* comp);
        Material(System::IntPtr^ ptr);

        [UrhoBackend::CollectionInsert("InsertParam")]
        [UrhoBackend::CollectionRemove("RemoveParam")]
        property UrhoBackend::ParentedList<MaterialParam^>^ Params { UrhoBackend::ParentedList<MaterialParam^>^ get() { return params_; } }
        
        [UrhoBackend::CollectionInsert("InsertTechnique")]
        [UrhoBackend::CollectionRemove("RemoveTechnique")]
        property UrhoBackend::ParentedList<MaterialTechnique^>^ Techniques { UrhoBackend::ParentedList<MaterialTechnique^>^ get() { return techniques_; } }

        [CategoryAttribute("Textures")]
        [UrhoResource("Texture2D")]
        property UrhoBackend::ResourceRef^ DiffuseTexture { UrhoBackend::ResourceRef^       get() { return GetTextureResource(TextureUnit::TU_DIFFUSE); }       void set(UrhoBackend::ResourceRef^ value) { SetTextureResource(TextureUnit::TU_DIFFUSE, value); } }
        [CategoryAttribute("Textures")]
        [UrhoResource("Texture2D")]
        property UrhoBackend::ResourceRef^ NormalTexture { UrhoBackend::ResourceRef^        get() { return GetTextureResource(TextureUnit::TU_NORMAL); }        void set(UrhoBackend::ResourceRef^ value) { SetTextureResource(TextureUnit::TU_NORMAL, value); } }
        [CategoryAttribute("Textures")]
        [UrhoResource("Texture2D")]
        property UrhoBackend::ResourceRef^ SpecularTexture { UrhoBackend::ResourceRef^      get() { return GetTextureResource(TextureUnit::TU_SPECULAR); }      void set(UrhoBackend::ResourceRef^ value) { SetTextureResource(TextureUnit::TU_SPECULAR, value); } }
        [CategoryAttribute("Textures")]
        [UrhoResource("Texture2D")]
        property UrhoBackend::ResourceRef^ EmissiveTexture { UrhoBackend::ResourceRef^      get() { return GetTextureResource(TextureUnit::TU_EMISSIVE); }      void set(UrhoBackend::ResourceRef^ value) { SetTextureResource(TextureUnit::TU_EMISSIVE, value); } }
        [CategoryAttribute("Textures")]
        [UrhoResource("TextureCube")]
        property UrhoBackend::ResourceRef^ EnvironmentTexture { UrhoBackend::ResourceRef^   get() { return GetTextureResource(TextureUnit::TU_ENVIRONMENT); }   void set(UrhoBackend::ResourceRef^ value) { SetTextureResource(TextureUnit::TU_ENVIRONMENT, value); } }
        [CategoryAttribute("Textures")]
        [UrhoResource("Texture3D")]
        property UrhoBackend::ResourceRef^ VolumeTexture { UrhoBackend::ResourceRef^        get() { return GetTextureResource(TextureUnit::TU_VOLUMEMAP); }     void set(UrhoBackend::ResourceRef^ value) { SetTextureResource(TextureUnit::TU_VOLUMEMAP, value); } }
        [CategoryAttribute("Textures")]
        [UrhoResource("Texture2D", "Texture3D", "TextureCube")]
        property UrhoBackend::ResourceRef^ CustomTexture1 { UrhoBackend::ResourceRef^       get() { return GetTextureResource(TextureUnit::TU_CUSTOM1); }       void set(UrhoBackend::ResourceRef^ value) { SetTextureResource(TextureUnit::TU_CUSTOM1, value); } }
        [CategoryAttribute("Textures")]
        [UrhoResource("Texture2D", "Texture3D", "TextureCube")]
        property UrhoBackend::ResourceRef^ CustomTexture2 { UrhoBackend::ResourceRef^       get() { return GetTextureResource(TextureUnit::TU_CUSTOM2); }       void set(UrhoBackend::ResourceRef^ value) { SetTextureResource(TextureUnit::TU_CUSTOM2, value); } }

// Properties   
        [CategoryAttribute("Culling")]
        property CullMode cullMode { CullMode get(); void set(CullMode); }
        [CategoryAttribute("Culling")]
        property CullMode shadowCullMode { CullMode get(); void set(CullMode); }
        [CategoryAttribute("Culling")]
        property FillMode fillMode { FillMode get(); void set(FillMode); }

        property float ConstantBias {float get(); void set(float); }
        property float SlopeBias { float get(); void set(float); }

        [Browsable(false)]
        property Scene^ scene { Scene^ get(); void set(Scene^); }
// Methods
        void SetUVTransform(UrhoBackend::Vector2^, float, UrhoBackend::Vector2^);
        void SetUVTransform(UrhoBackend::Vector2^, float, float);
        void RemoveShaderParameter(System::String^);
        void SortTechniques();
        void SetShaderParameterAnimation(System::String^, ValueAnimation^, WrapMode, float);
        ValueAnimation^ GetShaderParameterAnimation(System::String^);
        void SetShaderParameterAnimationWrapMode(System::String^, WrapMode);
        WrapMode GetShaderParameterAnimationWrapMode(System::String^);
        void SetShaderParameterAnimationSpeed(System::String^, float);
        float GetShaderParameterAnimationSpeed(System::String^);

// Added methods
        ResourceRef^ GetTextureResource(TextureUnit unit);
        void SetTextureResource(TextureUnit unit, ResourceRef^ ref);

        MaterialParam^ InsertParam();
        MaterialTechnique^ InsertTechnique();
        void RemoveParam(unsigned index);
        void RemoveTechnique(unsigned index);
        XMLFile^ Save();
// Fields

        Urho3D::Material* material_;
    };
}
