//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Terrain.h"

#include <Urho3D/Graphics/Terrain.h>
#include <Urho3D/Graphics/TerrainPatch.h>
#include "TerrainPatch.h"
#include <Urho3D/Graphics/Material.h>
#include "Material.h"
#include <Urho3D/Resource/Image.h>
#include "Image.h"

namespace UrhoBackend {

Terrain::Terrain(Urho3D::Terrain* fromUrho) : Component(fromUrho) { terrain_ = fromUrho; }
Terrain::Terrain(System::IntPtr^ ptr) : Terrain((Urho3D::Terrain*)ptr->ToPointer()) { }

Material^ Terrain::material::get() { return gcnew UrhoBackend::Material(terrain_->GetMaterial()); }
void Terrain::material::set(Material^ value) { terrain_->SetMaterial(value->material_); }

bool Terrain::smoothing::get() { return terrain_->GetSmoothing(); }
void Terrain::smoothing::set(bool value) { terrain_->SetSmoothing(value); }

Image^ Terrain::heightMap::get() { return gcnew UrhoBackend::Image(terrain_->GetHeightMap()); }
void Terrain::heightMap::set(Image^ value) { terrain_->SetHeightMap(value->image_); }

int Terrain::patchSize::get() { return terrain_->GetPatchSize(); }
void Terrain::patchSize::set(int value) { terrain_->SetPatchSize(value); }

UrhoBackend::Vector3^ Terrain::spacing::get() { return gcnew UrhoBackend::Vector3(terrain_->GetSpacing()); }
void Terrain::spacing::set(UrhoBackend::Vector3^ value) { terrain_->SetSpacing(value->ToVector3()); }

UrhoBackend::IntVector2^ Terrain::numVertices::get() { return gcnew UrhoBackend::IntVector2(terrain_->GetNumVertices()); }
UrhoBackend::IntVector2^ Terrain::numPatches::get() { return gcnew UrhoBackend::IntVector2(terrain_->GetNumPatches()); }
TerrainPatch^ Terrain::patches::get(unsigned A) { return gcnew UrhoBackend::TerrainPatch(terrain_->GetPatch(A)); }

bool Terrain::castShadows::get() { return terrain_->GetCastShadows(); }
void Terrain::castShadows::set(bool value) { terrain_->SetCastShadows(value); }

bool Terrain::occluder::get() { return terrain_->IsOccluder(); }
void Terrain::occluder::set(bool value) { terrain_->SetOccluder(value); }

bool Terrain::occludee::get() { return terrain_->IsOccludee(); }
void Terrain::occludee::set(bool value) { terrain_->SetOccludee(value); }

float Terrain::drawDistance::get() { return terrain_->GetDrawDistance(); }
void Terrain::drawDistance::set(float value) { terrain_->SetDrawDistance(value); }

float Terrain::shadowDistance::get() { return terrain_->GetShadowDistance(); }
void Terrain::shadowDistance::set(float value) { terrain_->SetShadowDistance(value); }

float Terrain::lodBias::get() { return terrain_->GetLodBias(); }
void Terrain::lodBias::set(float value) { terrain_->SetLodBias(value); }

unsigned Terrain::viewMask::get() { return terrain_->GetViewMask(); }
void Terrain::viewMask::set(unsigned value) { terrain_->SetViewMask(value); }

unsigned Terrain::lightMask::get() { return terrain_->GetLightMask(); }
void Terrain::lightMask::set(unsigned value) { terrain_->SetLightMask(value); }

unsigned Terrain::shadowMask::get() { return terrain_->GetShadowMask(); }
void Terrain::shadowMask::set(unsigned value) { terrain_->SetShadowMask(value); }

unsigned Terrain::zoneMask::get() { return terrain_->GetZoneMask(); }
void Terrain::zoneMask::set(unsigned value) { terrain_->SetZoneMask(value); }

unsigned Terrain::maxLights::get() { return terrain_->GetMaxLights(); }
void Terrain::maxLights::set(unsigned value) { terrain_->SetMaxLights(value); }

void Terrain::ApplyHeightMap()  {  terrain_->ApplyHeightMap(); }

float Terrain::GetHeight(UrhoBackend::Vector3^ A)  { return  terrain_->GetHeight(A->ToVector3()); }

UrhoBackend::Vector3^ Terrain::GetNormal(UrhoBackend::Vector3^ A)  { return  gcnew UrhoBackend::Vector3(terrain_->GetNormal(A->ToVector3())); }

TerrainPatch^ Terrain::GetPatch(int A, int B)  { return  gcnew UrhoBackend::TerrainPatch(terrain_->GetPatch(A, B)); }

UrhoBackend::IntVector2^ Terrain::WorldToHeightMap(UrhoBackend::Vector3^ A)  { return  gcnew UrhoBackend::IntVector2(terrain_->WorldToHeightMap(A->ToVector3())); }

}
