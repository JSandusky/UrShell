//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "CustomGeometry.h"

#include <Urho3D/Graphics/CustomGeometry.h>
#include <Urho3D/Graphics/CustomGeometry.h>
#include "CustomGeometryVertex.h"
#include <Urho3D/Graphics/Material.h>
#include "Material.h"
#include <Urho3D/Graphics/Zone.h>
#include "Zone.h"
#include <Urho3D/Graphics/GraphicsDefs.h>

namespace UrhoBackend {

CustomGeometry::CustomGeometry(Urho3D::CustomGeometry* fromUrho) : Drawable(fromUrho) { customgeometry_ = fromUrho; }
CustomGeometry::CustomGeometry(System::IntPtr^ ptr) : CustomGeometry((Urho3D::CustomGeometry*)ptr->ToPointer()) { }

bool CustomGeometry::dynamic::get() { return customgeometry_->IsDynamic(); }
void CustomGeometry::dynamic::set(bool value) { customgeometry_->SetDynamic(value); }

Material^ CustomGeometry::materials::get(unsigned A) { return gcnew UrhoBackend::Material(customgeometry_->GetMaterial(A)); }

void CustomGeometry::materials::set(Material^ A) { customgeometry_->SetMaterial(A->material_); }

void CustomGeometry::materials::set(unsigned A, Material^ B) { customgeometry_->SetMaterial(A, B->material_); }

unsigned CustomGeometry::numGeometries::get() { return customgeometry_->GetNumGeometries(); }
void CustomGeometry::numGeometries::set(unsigned value) { customgeometry_->SetNumGeometries(value); }

unsigned CustomGeometry::numVertices::get(unsigned A) { return customgeometry_->GetNumVertices(A); }

Zone^ CustomGeometry::zone::get() { return gcnew UrhoBackend::Zone(customgeometry_->GetZone()); }
void CustomGeometry::Clear()  {  customgeometry_->Clear(); }

void CustomGeometry::BeginGeometry(unsigned A, PrimitiveType B)  {  customgeometry_->BeginGeometry(A, (Urho3D::PrimitiveType)B); }

void CustomGeometry::DefineVertex(UrhoBackend::Vector3^ A)  {  customgeometry_->DefineVertex(A->ToVector3()); }

void CustomGeometry::DefineNormal(UrhoBackend::Vector3^ A)  {  customgeometry_->DefineNormal(A->ToVector3()); }

void CustomGeometry::DefineColor(UrhoBackend::Color^ A)  {  customgeometry_->DefineColor(A->ToColor()); }

void CustomGeometry::DefineTexCoord(UrhoBackend::Vector2^ A)  {  customgeometry_->DefineTexCoord(A->ToVector2()); }

void CustomGeometry::DefineTangent(UrhoBackend::Vector4^ A)  {  customgeometry_->DefineTangent(A->ToVector4()); }

void CustomGeometry::DefineGeometry(unsigned A, PrimitiveType B, unsigned C, bool D, bool E, bool F, bool G)  {  customgeometry_->DefineGeometry(A, (Urho3D::PrimitiveType)B, C, D, E, F, G); }

void CustomGeometry::Commit()  {  customgeometry_->Commit(); }

CustomGeometryVertex^ CustomGeometry::GetVertex(unsigned A, unsigned B)  { return  gcnew UrhoBackend::CustomGeometryVertex(customgeometry_->GetVertex(A, B)); }

}
