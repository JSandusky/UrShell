//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Renderer.h"

#include <Urho3D/Graphics/Renderer.h>
#include <Urho3D/Resource/XMLFile.h>
#include "XMLFile.h"
#include <Urho3D/Graphics/Viewport.h>
#include "Viewport.h"
#include <Urho3D/Graphics/RenderPath.h>
#include "RenderPath.h"
#include <Urho3D/Graphics/Zone.h>
#include "Zone.h"
#include <Urho3D/Graphics/Material.h>
#include "Material.h"
#include <Urho3D/Graphics/GraphicsDefs.h>

namespace UrhoBackend {

Renderer::Renderer(Urho3D::Renderer* fromUrho) : Object(fromUrho) { renderer_ = fromUrho; }
Renderer::Renderer(System::IntPtr^ ptr) : Renderer((Urho3D::Renderer*)ptr->ToPointer()) { }

unsigned Renderer::numViewports::get() { return renderer_->GetNumViewports(); }
void Renderer::numViewports::set(unsigned value) { renderer_->SetNumViewports(value); }

Viewport^ Renderer::viewports::get(unsigned A) { return gcnew UrhoBackend::Viewport(renderer_->GetViewport(A)); }

void Renderer::viewports::set(unsigned A, Viewport^ B) { renderer_->SetViewport(A, B->viewport_); }

RenderPath^ Renderer::defaultRenderPath::get() { return gcnew UrhoBackend::RenderPath(renderer_->GetDefaultRenderPath()); }
void Renderer::defaultRenderPath::set(RenderPath^ value) { renderer_->SetDefaultRenderPath(value->renderpath_); }

Zone^ Renderer::defaultZone::get() { return gcnew UrhoBackend::Zone(renderer_->GetDefaultZone()); }
Material^ Renderer::defaultMaterial::get() { return gcnew UrhoBackend::Material(renderer_->GetDefaultMaterial()); }
Material^ Renderer::defaultLightRamp::get() { return gcnew UrhoBackend::Material(renderer_->GetDefaultLightRamp()); }
Material^ Renderer::defaultLightSpot::get() { return gcnew UrhoBackend::Material(renderer_->GetDefaultLightSpot()); }
bool Renderer::hdrRendering::get() { return renderer_->GetHDRRendering(); }
void Renderer::hdrRendering::set(bool value) { renderer_->SetHDRRendering(value); }

bool Renderer::specularLighting::get() { return renderer_->GetSpecularLighting(); }
void Renderer::specularLighting::set(bool value) { renderer_->SetSpecularLighting(value); }

int Renderer::textureAnisotropy::get() { return renderer_->GetTextureAnisotropy(); }
void Renderer::textureAnisotropy::set(int value) { renderer_->SetTextureAnisotropy(value); }

TextureFilterMode Renderer::textureFilterMode::get() { return (UrhoBackend::TextureFilterMode)renderer_->GetTextureFilterMode(); }
void Renderer::textureFilterMode::set(TextureFilterMode value) { renderer_->SetTextureFilterMode((Urho3D::TextureFilterMode)value); }

int Renderer::textureQuality::get() { return renderer_->GetTextureQuality(); }
void Renderer::textureQuality::set(int value) { renderer_->SetTextureQuality(value); }

int Renderer::materialQuality::get() { return renderer_->GetMaterialQuality(); }
void Renderer::materialQuality::set(int value) { renderer_->SetMaterialQuality(value); }

bool Renderer::drawShadows::get() { return renderer_->GetDrawShadows(); }
void Renderer::drawShadows::set(bool value) { renderer_->SetDrawShadows(value); }

int Renderer::shadowMapSize::get() { return renderer_->GetShadowMapSize(); }
void Renderer::shadowMapSize::set(int value) { renderer_->SetShadowMapSize(value); }

int Renderer::shadowQuality::get() { return renderer_->GetShadowQuality(); }
void Renderer::shadowQuality::set(int value) { renderer_->SetShadowQuality(value); }

int Renderer::maxShadowMaps::get() { return renderer_->GetMaxShadowMaps(); }
void Renderer::maxShadowMaps::set(int value) { renderer_->SetMaxShadowMaps(value); }

bool Renderer::reuseShadowMaps::get() { return renderer_->GetReuseShadowMaps(); }
void Renderer::reuseShadowMaps::set(bool value) { renderer_->SetReuseShadowMaps(value); }

bool Renderer::dynamicInstancing::get() { return renderer_->GetDynamicInstancing(); }
void Renderer::dynamicInstancing::set(bool value) { renderer_->SetDynamicInstancing(value); }

int Renderer::minInstances::get() { return renderer_->GetMinInstances(); }
void Renderer::minInstances::set(int value) { renderer_->SetMinInstances(value); }

int Renderer::maxSortedInstances::get() { return renderer_->GetMaxSortedInstances(); }
void Renderer::maxSortedInstances::set(int value) { renderer_->SetMaxSortedInstances(value); }

int Renderer::maxOccluderTriangles::get() { return renderer_->GetMaxOccluderTriangles(); }
void Renderer::maxOccluderTriangles::set(int value) { renderer_->SetMaxOccluderTriangles(value); }

int Renderer::occlusionBufferSize::get() { return renderer_->GetOcclusionBufferSize(); }
void Renderer::occlusionBufferSize::set(int value) { renderer_->SetOcclusionBufferSize(value); }

float Renderer::occluderSizeThreshold::get() { return renderer_->GetOccluderSizeThreshold(); }
void Renderer::occluderSizeThreshold::set(float value) { renderer_->SetOccluderSizeThreshold(value); }

float Renderer::mobileShadowBiasMul::get() { return renderer_->GetMobileShadowBiasMul(); }
void Renderer::mobileShadowBiasMul::set(float value) { renderer_->SetMobileShadowBiasMul(value); }

float Renderer::mobileShadowBiasAdd::get() { return renderer_->GetMobileShadowBiasAdd(); }
void Renderer::mobileShadowBiasAdd::set(float value) { renderer_->SetMobileShadowBiasAdd(value); }

unsigned Renderer::numPrimitives::get() { return renderer_->GetNumPrimitives(); }
unsigned Renderer::numBatches::get() { return renderer_->GetNumBatches(); }
unsigned Renderer::numViews::get() { return renderer_->GetNumViews(); }
unsigned Renderer::numGeometries::get(bool A) { return renderer_->GetNumGeometries(A); }

unsigned Renderer::numLights::get(bool A) { return renderer_->GetNumLights(A); }

unsigned Renderer::numShadowMaps::get(bool A) { return renderer_->GetNumShadowMaps(A); }

unsigned Renderer::numOccluders::get(bool A) { return renderer_->GetNumOccluders(A); }

void Renderer::DrawDebugGeometry(bool A)  {  renderer_->DrawDebugGeometry(A); }

void Renderer::ReloadShaders()  {  renderer_->ReloadShaders(); }

void Renderer::SetDefaultRenderPath(XMLFile^ A)  {  renderer_->SetDefaultRenderPath(A->xmlfile_); }

}
