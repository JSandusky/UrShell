//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#pragma once

#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../Attributes.h"

#include "Enumerations.h"

namespace Urho3D {
    class RigidBody;
    class Vector3;
    class Quaternion;
}



namespace UrhoBackend {


    public ref class RigidBody : public UrhoBackend::Component {
    public:
        RigidBody(Urho3D::RigidBody* comp);
        RigidBody(System::IntPtr^ ptr);

// Properties
        property UrhoBackend::Vector3^ gravityOverride { void set(UrhoBackend::Vector3^); }
        property float mass { float get(); void set(float); }
        property UrhoBackend::Vector3^ position { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property UrhoBackend::Quaternion^ rotation { UrhoBackend::Quaternion^ get(); void set(UrhoBackend::Quaternion^); }
        property UrhoBackend::Vector3^ linearVelocity { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property UrhoBackend::Vector3^ linearFactor { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property float linearRestThreshold { float get(); void set(float); }
        property float linearDamping { float get(); void set(float); }
        property UrhoBackend::Vector3^ angularVelocity { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property UrhoBackend::Vector3^ angularFactor { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property float angularRestThreshold { float get(); void set(float); }
        property float angularDamping { float get(); void set(float); }
        property float friction { float get(); void set(float); }
        property UrhoBackend::Vector3^ anisotropicFriction { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property float rollingFriction { float get(); void set(float); }
        property float restitution { float get(); void set(float); }
        property float contactProcessingThreshold { float get(); void set(float); }
        property float ccdRadius { float get(); void set(float); }
        property float ccdMotionThreshold { float get(); void set(float); }
        property bool useGravity { bool get(); void set(bool); }
        property UrhoBackend::Vector3^ gravityOverride { UrhoBackend::Vector3^ get(); }
        property UrhoBackend::Vector3^ centerOfMass { UrhoBackend::Vector3^ get(); }
        property bool trigger { bool get(); void set(bool); }
        property bool kinematic { bool get(); void set(bool); }
        property bool active { bool get(); }
        property unsigned collisionLayer { unsigned get(); void set(unsigned); }
        property unsigned collisionMask { unsigned get(); void set(unsigned); }
        property CollisionEventMode collisionEventMode { CollisionEventMode get(); void set(CollisionEventMode); }
// Methods
        void SetTransform(UrhoBackend::Vector3^, UrhoBackend::Quaternion^);
        void SetCollisionLayerAndMask(unsigned, unsigned);
        void ApplyForce(UrhoBackend::Vector3^);
        void ApplyForce(UrhoBackend::Vector3^, UrhoBackend::Vector3^);
        void ApplyTorque(UrhoBackend::Vector3^);
        void ApplyImpulse(UrhoBackend::Vector3^);
        void ApplyImpulse(UrhoBackend::Vector3^, UrhoBackend::Vector3^);
        void ApplyTorqueImpulse(UrhoBackend::Vector3^);
        void ResetForces();
        void Activate();
        void ReAddBodyToWorld();
        void DisableMassUpdate();
        void EnableMassUpdate();
        UrhoBackend::Vector3^ GetVelocityAtPoint(UrhoBackend::Vector3^);
// Fields

        Urho3D::RigidBody* rigidbody_;
    };
}
