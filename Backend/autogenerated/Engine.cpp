//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Engine.h"

#include <Urho3D/Engine/Engine.h>
#include <Urho3D/Engine/Console.h>
#include "Console.h"
#include <Urho3D/Engine/DebugHud.h>
#include "DebugHud.h"

namespace UrhoBackend {

Engine::Engine(Urho3D::Engine* fromUrho) : Object(fromUrho) { engine_ = fromUrho; }
Engine::Engine(System::IntPtr^ ptr) : Engine((Urho3D::Engine*)ptr->ToPointer()) { }

int Engine::minFps::get() { return engine_->GetMinFps(); }
void Engine::minFps::set(int value) { engine_->SetMinFps(value); }

int Engine::maxFps::get() { return engine_->GetMaxFps(); }
void Engine::maxFps::set(int value) { engine_->SetMaxFps(value); }

int Engine::timeStepSmoothing::get() { return engine_->GetTimeStepSmoothing(); }
void Engine::timeStepSmoothing::set(int value) { engine_->SetTimeStepSmoothing(value); }

int Engine::maxInactiveFps::get() { return engine_->GetMaxInactiveFps(); }
void Engine::maxInactiveFps::set(int value) { engine_->SetMaxInactiveFps(value); }

bool Engine::pauseMinimized::get() { return engine_->GetPauseMinimized(); }
void Engine::pauseMinimized::set(bool value) { engine_->SetPauseMinimized(value); }

bool Engine::autoExit::get() { return engine_->GetAutoExit(); }
void Engine::autoExit::set(bool value) { engine_->SetAutoExit(value); }

bool Engine::initialized::get() { return engine_->IsInitialized(); }
bool Engine::exiting::get() { return engine_->IsExiting(); }
bool Engine::headless::get() { return engine_->IsHeadless(); }
void Engine::RunFrame()  {  engine_->RunFrame(); }

void Engine::Exit()  {  engine_->Exit(); }

void Engine::DumpProfiler()  {  engine_->DumpProfiler(); }

void Engine::DumpResources(boo A)  {  engine_->DumpResources(A); }

void Engine::DumpMemory()  {  engine_->DumpMemory(); }

Console^ Engine::CreateConsole()  { return  gcnew UrhoBackend::Console(engine_->CreateConsole()); }

DebugHud^ Engine::CreateDebugHud()  { return  gcnew UrhoBackend::DebugHud(engine_->CreateDebugHud()); }

}
