//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Light.h"

#include <Urho3D/Graphics/Light.h>
#include <Urho3D/Graphics/Light.h>
#include "BiasParameters.h"
#include <Urho3D/Graphics/Light.h>
#include "CascadeParameters.h"
#include <Urho3D/Graphics/Light.h>
#include "FocusParameters.h"
#include <Urho3D/Graphics/Texture.h>
#include "Texture.h"
#include <Urho3D/Math/Frustum.h>
#include "Frustum.h"
#include <Urho3D/Graphics/Light.h>

namespace UrhoBackend {

Light::Light(Urho3D::Light* fromUrho) : Drawable(fromUrho) { light_ = fromUrho; }
Light::Light(System::IntPtr^ ptr) : Light((Urho3D::Light*)ptr->ToPointer()) { }

LightType Light::lightType::get() { return (UrhoBackend::LightType)light_->GetLightType(); }
void Light::lightType::set(LightType value) { light_->SetLightType((Urho3D::LightType)value); }

bool Light::perVertex::get() { return light_->GetPerVertex(); }
void Light::perVertex::set(bool value) { light_->SetPerVertex(value); }

UrhoBackend::Color^ Light::color::get() { return gcnew Color(light_->GetColor()); }
void Light::color::set(UrhoBackend::Color^ value) { light_->SetColor(value->ToColor()); }

float Light::specularIntensity::get() { return light_->GetSpecularIntensity(); }
void Light::specularIntensity::set(float value) { light_->SetSpecularIntensity(value); }

float Light::brightness::get() { return light_->GetBrightness(); }
void Light::brightness::set(float value) { light_->SetBrightness(value); }

float Light::range::get() { return light_->GetRange(); }
void Light::range::set(float value) { light_->SetRange(value); }

float Light::fov::get() { return light_->GetFov(); }
void Light::fov::set(float value) { light_->SetFov(value); }

float Light::aspectRatio::get() { return light_->GetAspectRatio(); }
void Light::aspectRatio::set(float value) { light_->SetAspectRatio(value); }

float Light::fadeDistance::get() { return light_->GetFadeDistance(); }
void Light::fadeDistance::set(float value) { light_->SetFadeDistance(value); }

BiasParameters^ Light::shadowBias::get() { return gcnew UrhoBackend::BiasParameters(light_->GetShadowBias()); }
void Light::shadowBias::set(BiasParameters^ value) { light_->SetShadowBias(*value->biasparameters_); }

CascadeParameters^ Light::shadowCascade::get() { return gcnew UrhoBackend::CascadeParameters(light_->GetShadowCascade()); }
void Light::shadowCascade::set(CascadeParameters^ value) { light_->SetShadowCascade(*value->cascadeparameters_); }

FocusParameters^ Light::shadowFocus::get() { return gcnew UrhoBackend::FocusParameters(light_->GetShadowFocus()); }
void Light::shadowFocus::set(FocusParameters^ value) { light_->SetShadowFocus(*value->focusparameters_); }

float Light::shadowFadeDistance::get() { return light_->GetShadowFadeDistance(); }
void Light::shadowFadeDistance::set(float value) { light_->SetShadowFadeDistance(value); }

float Light::shadowIntensity::get() { return light_->GetShadowIntensity(); }
void Light::shadowIntensity::set(float value) { light_->SetShadowIntensity(value); }

float Light::shadowResolution::get() { return light_->GetShadowResolution(); }
void Light::shadowResolution::set(float value) { light_->SetShadowResolution(value); }

float Light::shadowNearFarRatio::get() { return light_->GetShadowNearFarRatio(); }
void Light::shadowNearFarRatio::set(float value) { light_->SetShadowNearFarRatio(value); }

Texture^ Light::rampTexture::get() { return gcnew UrhoBackend::Texture(light_->GetRampTexture()); }
void Light::rampTexture::set(Texture^ value) { light_->SetRampTexture(value->texture_); }

Texture^ Light::shapeTexture::get() { return gcnew UrhoBackend::Texture(light_->GetShapeTexture()); }
void Light::shapeTexture::set(Texture^ value) { light_->SetShapeTexture(value->texture_); }

Frustum^ Light::frustum::get() { return gcnew UrhoBackend::Frustum(light_->GetFrustum()); }
int Light::numShadowSplits::get() { return light_->GetNumShadowSplits(); }
bool Light::negative::get() { return light_->IsNegative(); }
UrhoBackend::Color^ Light::effectiveColor::get() { return gcnew Color(light_->GetEffectiveColor()); }
float Light::effectiveSpecularIntensity::get() { return light_->GetEffectiveSpecularIntensity(); }
}
