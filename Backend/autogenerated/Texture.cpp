//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Texture.h"

#include <Urho3D/Graphics/Texture.h>
#include <Urho3D/Graphics/GraphicsDefs.h>
#include <Urho3D/Graphics/GraphicsDefs.h>
#include <Urho3D/Graphics/GraphicsDefs.h>
#include <Urho3D/Graphics/GraphicsDefs.h>

namespace UrhoBackend {

Texture::Texture(Urho3D::Texture* fromUrho) : Resource(fromUrho) { texture_ = fromUrho; }
Texture::Texture(System::IntPtr^ ptr) : Texture((Urho3D::Texture*)ptr->ToPointer()) { }

TextureUsage Texture::usage::get() { return (UrhoBackend::TextureUsage)texture_->GetUsage(); }
unsigned Texture::format::get() { return texture_->GetFormat(); }
bool Texture::compressed::get() { return texture_->IsCompressed(); }
unsigned Texture::levels::get() { return texture_->GetLevels(); }
int Texture::width::get() { return texture_->GetWidth(); }
int Texture::height::get() { return texture_->GetHeight(); }
int Texture::levelWidth::get(unsigned A) { return texture_->GetLevelWidth(A); }

int Texture::levelHeight::get(unsigned A) { return texture_->GetLevelHeight(A); }

TextureFilterMode Texture::filterMode::get() { return (UrhoBackend::TextureFilterMode)texture_->GetFilterMode(); }
void Texture::filterMode::set(TextureFilterMode value) { texture_->SetFilterMode((Urho3D::TextureFilterMode)value); }

TextureAddressMode Texture::addressMode::get(TextureCoordinate A) { return (UrhoBackend::TextureAddressMode)texture_->GetAddressMode((Urho3D::TextureCoordinate)A); }

void Texture::addressMode::set(TextureCoordinate A, TextureAddressMode B) { texture_->SetAddressMode((Urho3D::TextureCoordinate)A, (Urho3D::TextureAddressMode)B); }

UrhoBackend::Color^ Texture::borderColor::get() { return gcnew Color(texture_->GetBorderColor()); }
void Texture::borderColor::set(UrhoBackend::Color^ value) { texture_->SetBorderColor(value->ToColor()); }

bool Texture::sRGB::get() { return texture_->GetSRGB(); }
void Texture::sRGB::set(bool value) { texture_->SetSRGB(value); }

Texture^ Texture::backupTexture::get() { return gcnew UrhoBackend::Texture(texture_->GetBackupTexture()); }
void Texture::backupTexture::set(Texture^ value) { texture_->SetBackupTexture(value->texture_); }

int Texture::mipsToSkip::get(int A) { return texture_->GetMipsToSkip(A); }

void Texture::mipsToSkip::set(int A, int B) { texture_->SetMipsToSkip(A, B); }

bool Texture::dataLost::get() { return texture_->IsDataLost(); }
void Texture::SetNumLevels(unsigned A)  {  texture_->SetNumLevels(A); }

void Texture::ClearDataLost()  {  texture_->ClearDataLost(); }

}
