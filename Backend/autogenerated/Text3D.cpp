//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Text3D.h"

#include <Urho3D/UI/Text3D.h>
#include <Urho3D/UI/Font.h>
#include "Font.h"
#include <Urho3D/Graphics/Material.h>
#include "Material.h"
#include <Urho3D/UI/UIElement.h>
#include <Urho3D/UI/UIElement.h>
#include <Urho3D/UI/Text.h>
#include <Urho3D/UI/UIElement.h>
#include <Urho3D/Graphics/GraphicsDefs.h>

namespace UrhoBackend {

Text3D::Text3D(Urho3D::Text3D* fromUrho) : Drawable(fromUrho) { text3d_ = fromUrho; }
Text3D::Text3D(System::IntPtr^ ptr) : Text3D((Urho3D::Text3D*)ptr->ToPointer()) { }

void Text3D::width::set(int value) { text3d_->SetWidth(value); }

Font^ Text3D::font::get() { return gcnew UrhoBackend::Font(text3d_->GetFont()); }
int Text3D::fontSize::get() { return text3d_->GetFontSize(); }
Material^ Text3D::material::get() { return gcnew UrhoBackend::Material(text3d_->GetMaterial()); }
void Text3D::material::set(Material^ value) { text3d_->SetMaterial(value->material_); }

System::String^ Text3D::text::get() { return gcnew System::String(text3d_->GetText().CString()); }
void Text3D::text::set(System::String^ value) { text3d_->SetText(Urho3D::String(ToCString(value))); }

HorizontalAlignment Text3D::textAlignment::get() { return (UrhoBackend::HorizontalAlignment)text3d_->GetTextAlignment(); }
void Text3D::textAlignment::set(HorizontalAlignment value) { text3d_->SetTextAlignment((Urho3D::HorizontalAlignment)value); }

HorizontalAlignment Text3D::horizontalAlignment::get() { return (UrhoBackend::HorizontalAlignment)text3d_->GetHorizontalAlignment(); }
void Text3D::horizontalAlignment::set(HorizontalAlignment value) { text3d_->SetHorizontalAlignment((Urho3D::HorizontalAlignment)value); }

VerticalAlignment Text3D::verticalAlignment::get() { return (UrhoBackend::VerticalAlignment)text3d_->GetVerticalAlignment(); }
void Text3D::verticalAlignment::set(VerticalAlignment value) { text3d_->SetVerticalAlignment((Urho3D::VerticalAlignment)value); }

float Text3D::rowSpacing::get() { return text3d_->GetRowSpacing(); }
void Text3D::rowSpacing::set(float value) { text3d_->SetRowSpacing(value); }

bool Text3D::wordwrap::get() { return text3d_->GetWordwrap(); }
void Text3D::wordwrap::set(bool value) { text3d_->SetWordwrap(value); }

TextEffect Text3D::textEffect::get() { return (UrhoBackend::TextEffect)text3d_->GetTextEffect(); }
void Text3D::textEffect::set(TextEffect value) { text3d_->SetTextEffect((Urho3D::TextEffect)value); }

UrhoBackend::Color^ Text3D::effectColor::get() { return gcnew Color(text3d_->GetEffectColor()); }
void Text3D::effectColor::set(UrhoBackend::Color^ value) { text3d_->SetEffectColor(value->ToColor()); }

float Text3D::effectDepthBias::get() { return text3d_->GetEffectDepthBias(); }
void Text3D::effectDepthBias::set(float value) { text3d_->SetEffectDepthBias(value); }

int Text3D::width::get() { return text3d_->GetWidth(); }
UrhoBackend::Color^ Text3D::colors::get(Corner A) { return gcnew Color(text3d_->GetColor((Urho3D::Corner)A)); }

void Text3D::colors::set(UrhoBackend::Color^ A) { text3d_->SetColor(A->ToColor()); }

void Text3D::colors::set(Corner A, UrhoBackend::Color^ B) { text3d_->SetColor((Urho3D::Corner)A, B->ToColor()); }

float Text3D::opacity::get() { return text3d_->GetOpacity(); }
void Text3D::opacity::set(float value) { text3d_->SetOpacity(value); }

FaceCameraMode Text3D::faceCameraMode::get() { return (UrhoBackend::FaceCameraMode)text3d_->GetFaceCameraMode(); }
void Text3D::faceCameraMode::set(FaceCameraMode value) { text3d_->SetFaceCameraMode((Urho3D::FaceCameraMode)value); }

unsigned Text3D::numRows::get() { return text3d_->GetNumRows(); }
unsigned Text3D::numChars::get() { return text3d_->GetNumChars(); }
int Text3D::rowWidths::get(unsigned A) { return text3d_->GetRowWidth(A); }

UrhoBackend::IntVector2^ Text3D::charPositions::get(unsigned A) { return gcnew UrhoBackend::IntVector2(text3d_->GetCharPosition(A)); }

UrhoBackend::IntVector2^ Text3D::charSizes::get(unsigned A) { return gcnew UrhoBackend::IntVector2(text3d_->GetCharSize(A)); }

int Text3D::rowHeight::get() { return text3d_->GetRowHeight(); }
bool Text3D::SetFont(System::String^ A, int B)  { return  text3d_->SetFont(Urho3D::String(ToCString(A)), B); }

bool Text3D::SetFont(Font^ A, int B)  { return  text3d_->SetFont(A->font_, B); }

void Text3D::SetAlignment(HorizontalAlignment A, VerticalAlignment B)  {  text3d_->SetAlignment((Urho3D::HorizontalAlignment)A, (Urho3D::VerticalAlignment)B); }

}
