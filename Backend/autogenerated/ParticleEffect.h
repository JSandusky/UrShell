//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#pragma once

#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../Attributes.h"

namespace Urho3D {
    class ParticleEffect;
    class XMLElement;
    class Color;
    class ColorFrame;
    class Rect;
    class TextureFrame;
    class Material;
    class Vector3;
    class Vector2;
}

namespace UrhoBackend {

    ref class ColorFrame;
    ref class TextureFrame;
    ref class XMLFile;

    public ref class ParticleEffect : public UrhoBackend::UObject {
    public:
        ParticleEffect(Urho3D::ParticleEffect* comp);
        ParticleEffect(System::IntPtr ptr);

// Properties
        [UrhoBackend::UrhoResource("Material")]
        property System::String^ Material { System::String^ get(); void set(System::String^); }
        property unsigned NumParticles { unsigned get(); void set(unsigned); }
        property bool UpdateInvisible { bool get(); void set(bool); }
        property bool Relative { bool get(); void set(bool); }
        property bool Sorted { bool get(); void set(bool); }
        property bool Scaled { bool get(); void set(bool); }
        property float AnimationLodBias { float get(); void set(float); }
        property EmitterType EmissionType { EmitterType get(); void set(EmitterType); }
        property UrhoBackend::Vector3^ EmitterSize { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property UrhoBackend::Vector3^ MinDirection { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property UrhoBackend::Vector3^ MaxDirection { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property UrhoBackend::Vector3^ ConstantForce { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property float DampingForce { float get(); void set(float); }
        property float ActiveTime { float get(); void set(float); }
        property float InactiveTime { float get(); void set(float); }
        property float MinEmissionRate { float get(); void set(float); }
        property float MaxEmissionRate { float get(); void set(float); }
        property UrhoBackend::Vector2^ MinParticleSize { UrhoBackend::Vector2^ get(); void set(UrhoBackend::Vector2^); }
        property UrhoBackend::Vector2^ MaxParticleSize { UrhoBackend::Vector2^ get(); void set(UrhoBackend::Vector2^); }
        property float MinTimeToLive { float get(); void set(float); }
        property float MaxTimeToLive { float get(); void set(float); }
        property float MinVelocity { float get(); void set(float); }
        property float MaxVelocity { float get(); void set(float); }
        property float MinRotation { float get(); void set(float); }
        property float MaxRotation { float get(); void set(float); }
        property float MinRotationSpeed { float get(); void set(float); }
        property float MaxRotationSpeed { float get(); void set(float); }
        property float SizeAdd { float get(); void set(float); }
        property float SizeMul { float get(); void set(float); }
        [System::ComponentModel::Browsable(false)]
        property unsigned NumColorFrames { unsigned get(); void set(unsigned); }
        [System::ComponentModel::Browsable(false)]
        property unsigned NumTextureFrames { unsigned get(); void set(unsigned); }

        [UrhoBackend::CollectionInsert("InsertColorFrame")]
        [UrhoBackend::CollectionRemove("RemoveColorFrame")]
        property UrhoBackend::ParentedList<UrhoBackend::ColorFrame^>^ ColorFrames {
            UrhoBackend::ParentedList<UrhoBackend::ColorFrame^>^ get() {
                return colorFrames_;
            }
        }
        [UrhoBackend::CollectionInsert("InsertTextureFrame")]
        [UrhoBackend::CollectionRemove("RemoveTextureFrame")]
        property UrhoBackend::ParentedList<UrhoBackend::TextureFrame^>^ TextureFrames { 
            UrhoBackend::ParentedList<UrhoBackend::TextureFrame^>^ get() {
                return textureFrames_;
            }
        }

// Collection handling Methods
        ColorFrame^ InsertColorFrame();
        TextureFrame^ InsertTextureFrame();

// Methods
        void AddColorTime(UrhoBackend::Color^, float);
        void AddColorFrame(ColorFrame^);
        void SortColorFrames();
        void RemoveColorFrame(unsigned);
        void SetColorFrame(unsigned, ColorFrame^);
        ColorFrame^ GetColorFrame(unsigned);
        void AddTextureTime(Rect^, float);
        void AddTextureFrame(TextureFrame^);
        void SortTextureFrames();
        void RemoveTextureFrame(unsigned);
        void SetTextureFrame(unsigned, TextureFrame^);
        TextureFrame^ GetTextureFrame(unsigned);

        void UpdateFrames();
        UrhoBackend::XMLFile^ Save();

// Fields
        Urho3D::ParticleEffect* particleeffect_;
        UrhoBackend::ParentedList<UrhoBackend::ColorFrame^>^ colorFrames_;
        UrhoBackend::ParentedList<UrhoBackend::TextureFrame^>^ textureFrames_;

        void FillFrames();
    };
}
