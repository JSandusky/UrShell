//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "LineEdit.h"

#include <Urho3D/UI/LineEdit.h>
#include <Urho3D/Graphics/Texture.h>
#include "Texture.h"
#include <Urho3D/Graphics/Texture.h>
#include "Text.h"
#include <Urho3D/UI/BorderImage.h>
#include "BorderImage.h"
#include <Urho3D/Graphics/GraphicsDefs.h>

namespace UrhoBackend {

LineEdit::LineEdit(Urho3D::LineEdit* fromUrho) : UIElement(fromUrho) { lineedit_ = fromUrho; }
LineEdit::LineEdit(System::IntPtr^ ptr) : LineEdit((Urho3D::LineEdit*)ptr->ToPointer()) { }

Texture^ LineEdit::texture::get() { return gcnew UrhoBackend::Texture(lineedit_->GetTexture()); }
void LineEdit::texture::set(Texture^ value) { lineedit_->SetTexture(value->texture_); }

UrhoBackend::IntRect^ LineEdit::imageRect::get() { return gcnew UrhoBackend::IntRect(lineedit_->GetImageRect()); }
void LineEdit::imageRect::set(UrhoBackend::IntRect^ value) { lineedit_->SetImageRect(value->ToIntRect()); }

UrhoBackend::IntRect^ LineEdit::border::get() { return gcnew UrhoBackend::IntRect(lineedit_->GetBorder()); }
void LineEdit::border::set(UrhoBackend::IntRect^ value) { lineedit_->SetBorder(value->ToIntRect()); }

UrhoBackend::IntRect^ LineEdit::imageBorder::get() { return gcnew UrhoBackend::IntRect(lineedit_->GetImageBorder()); }
void LineEdit::imageBorder::set(UrhoBackend::IntRect^ value) { lineedit_->SetImageBorder(value->ToIntRect()); }

UrhoBackend::IntVector2^ LineEdit::hoverOffset::get() { return gcnew UrhoBackend::IntVector2(lineedit_->GetHoverOffset()); }
void LineEdit::hoverOffset::set(UrhoBackend::IntVector2^ value) { lineedit_->SetHoverOffset(value->ToIntVector2()); }

BlendMode LineEdit::blendMode::get() { return (UrhoBackend::BlendMode)lineedit_->GetBlendMode(); }
void LineEdit::blendMode::set(BlendMode value) { lineedit_->SetBlendMode((Urho3D::BlendMode)value); }

bool LineEdit::tiled::get() { return lineedit_->IsTiled(); }
void LineEdit::tiled::set(bool value) { lineedit_->SetTiled(value); }

System::String^ LineEdit::text::get() { return gcnew System::String(lineedit_->GetText().CString()); }
void LineEdit::text::set(System::String^ value) { lineedit_->SetText(Urho3D::String(ToCString(value))); }

unsigned LineEdit::cursorPosition::get() { return lineedit_->GetCursorPosition(); }
void LineEdit::cursorPosition::set(unsigned value) { lineedit_->SetCursorPosition(value); }

float LineEdit::cursorBlinkRate::get() { return lineedit_->GetCursorBlinkRate(); }
void LineEdit::cursorBlinkRate::set(float value) { lineedit_->SetCursorBlinkRate(value); }

unsigned LineEdit::maxLength::get() { return lineedit_->GetMaxLength(); }
void LineEdit::maxLength::set(unsigned value) { lineedit_->SetMaxLength(value); }

unsigned LineEdit::echoCharacter::get() { return lineedit_->GetEchoCharacter(); }
void LineEdit::echoCharacter::set(unsigned value) { lineedit_->SetEchoCharacter(value); }

bool LineEdit::cursorMovable::get() { return lineedit_->IsCursorMovable(); }
void LineEdit::cursorMovable::set(bool value) { lineedit_->SetCursorMovable(value); }

bool LineEdit::textSelectable::get() { return lineedit_->IsTextSelectable(); }
void LineEdit::textSelectable::set(bool value) { lineedit_->SetTextSelectable(value); }

bool LineEdit::textCopyable::get() { return lineedit_->IsTextCopyable(); }
void LineEdit::textCopyable::set(bool value) { lineedit_->SetTextCopyable(value); }

Text^ LineEdit::textElement::get() { return gcnew UrhoBackend::Text(lineedit_->GetTextElement()); }
BorderImage^ LineEdit::cursor::get() { return gcnew UrhoBackend::BorderImage(lineedit_->GetCursor()); }
void LineEdit::SetFullImageRect()  {  lineedit_->SetFullImageRect(); }

void LineEdit::SetHoverOffset(int A, int B)  {  lineedit_->SetHoverOffset(A, B); }

}
