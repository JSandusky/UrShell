//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Frustum.h"

#include <Urho3D/Math/Frustum.h>
#include <Urho3D/Math/BoundingBox.h>
#include "BoundingBox.h"
#include <Urho3D/Math/Sphere.h>
#include "Sphere.h"
#include <Urho3D/Math/MathDefs.h>

namespace UrhoBackend {

Frustum::Frustum(Urho3D::Frustum fromUrho) { frustum_ = new Urho3D::Frustum(); *frustum_ = fromUrho; }
Frustum::Frustum(System::IntPtr^ ptr) : Frustum(*((Urho3D::Frustum*)ptr->ToPointer())) { }
Frustum::~Frustum() { delete frustum_; }
Frustum^ Frustum::opAssign(Frustum^ A)  { frustum_->operator =(*A->frustum_); return this; }

void Frustum::Define(float A, float B, float C, float D, float E, UrhoBackend::Matrix3x4^ F)  {  frustum_->Define(A, B, C, D, E, F->ToMatrix3x4()); }

void Frustum::Define(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B, UrhoBackend::Matrix3x4^ C)  {  frustum_->Define(A->ToVector3(), B->ToVector3(), C->ToMatrix3x4()); }

void Frustum::Define(BoundingBox^ A, UrhoBackend::Matrix3x4^ B)  {  frustum_->Define(*A->boundingbox_, B->ToMatrix3x4()); }

void Frustum::DefineOrtho(float A, float B, float C, float D, float E, UrhoBackend::Matrix3x4^ F)  {  frustum_->DefineOrtho(A, B, C, D, E, F->ToMatrix3x4()); }

void Frustum::Transform(UrhoBackend::Matrix3^ A)  {  frustum_->Transform(A->ToMatrix3()); }

void Frustum::Transform(UrhoBackend::Matrix3x4^ A)  {  frustum_->Transform(A->ToMatrix3x4()); }

Intersection Frustum::IsInside(UrhoBackend::Vector3^ A)  { return  (UrhoBackend::Intersection)frustum_->IsInside(A->ToVector3()); }

Intersection Frustum::IsInside(BoundingBox^ A)  { return  (UrhoBackend::Intersection)frustum_->IsInside(*A->boundingbox_); }

Intersection Frustum::IsInside(Sphere^ A)  { return  (UrhoBackend::Intersection)frustum_->IsInside(*A->sphere_); }

float Frustum::Distance(UrhoBackend::Vector3^ A)  { return  frustum_->Distance(A->ToVector3()); }

Frustum^ Frustum::Transformed(UrhoBackend::Matrix3^ A)  { return  gcnew UrhoBackend::Frustum(frustum_->Transformed(A->ToMatrix3())); }

Frustum^ Frustum::Transformed(UrhoBackend::Matrix3x4^ A)  { return  gcnew UrhoBackend::Frustum(frustum_->Transformed(A->ToMatrix3x4())); }

}
