//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Geometry.h"

#include <Urho3D/Graphics/Geometry.h>
#include <Urho3D/Graphics/VertexBuffer.h>
#include "VertexBuffer.h"
#include <Urho3D/Graphics/IndexBuffer.h>
#include "IndexBuffer.h"
#include <Urho3D/Graphics/GraphicsDefs.h>

namespace UrhoBackend {

Geometry::Geometry(Urho3D::Geometry* fromUrho) : Object(fromUrho) { geometry_ = fromUrho; }
Geometry::Geometry(System::IntPtr^ ptr) : Geometry((Urho3D::Geometry*)ptr->ToPointer()) { }

unsigned Geometry::numVertexBuffers::get() { return geometry_->GetNumVertexBuffers(); }
void Geometry::numVertexBuffers::set(unsigned value) { geometry_->SetNumVertexBuffers(value); }

VertexBuffer^ Geometry::vertexBuffers::get(unsigned A) { return gcnew UrhoBackend::VertexBuffer(geometry_->GetVertexBuffer(A)); }

unsigned Geometry::vertexElementMasks::get(unsigned A) { return geometry_->GetVertexElementMask(A); }

IndexBuffer^ Geometry::indexBuffer::get() { return gcnew UrhoBackend::IndexBuffer(geometry_->GetIndexBuffer()); }
void Geometry::indexBuffer::set(IndexBuffer^ value) { geometry_->SetIndexBuffer(value->indexbuffer_); }

PrimitiveType Geometry::primitiveType::get() { return (UrhoBackend::PrimitiveType)geometry_->GetPrimitiveType(); }
unsigned Geometry::indexStart::get() { return geometry_->GetIndexStart(); }
unsigned Geometry::indexCount::get() { return geometry_->GetIndexCount(); }
unsigned Geometry::vertexStart::get() { return geometry_->GetVertexStart(); }
unsigned Geometry::vertexCount::get() { return geometry_->GetVertexCount(); }
float Geometry::lodDistance::get() { return geometry_->GetLodDistance(); }
void Geometry::lodDistance::set(float value) { geometry_->SetLodDistance(value); }

bool Geometry::empty::get() { return geometry_->IsEmpty(); }
bool Geometry::SetVertexBuffer(unsigned A, VertexBuffer^ B, unsigned elementMask)  { return  geometry_->SetVertexBuffer(A, B->vertexbuffer_, elementMask); }

void Geometry::SetIndexBuffer(IndexBuffer^ A)  {  geometry_->SetIndexBuffer(A->indexbuffer_); }

bool Geometry::SetDrawRange(PrimitiveType A, unsigned B, unsigned C, bool getUsedVertexRange)  { return  geometry_->SetDrawRange((Urho3D::PrimitiveType)A, B, C, getUsedVertexRange); }

bool Geometry::SetDrawRange(PrimitiveType A, unsigned B, unsigned C, unsigned D, unsigned E, bool checkIllegal)  { return  geometry_->SetDrawRange((Urho3D::PrimitiveType)A, B, C, D, E, checkIllegal); }

}
