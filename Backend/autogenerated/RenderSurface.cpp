//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "RenderSurface.h"

#include <Urho3D/Graphics/RenderSurface.h>
#include <Urho3D/Graphics/Texture.h>
#include "Texture.h"
#include <Urho3D/Graphics/Viewport.h>
#include "Viewport.h"
#include <Urho3D/Graphics/GraphicsDefs.h>
#include <Urho3D/Graphics/GraphicsDefs.h>

namespace UrhoBackend {

RenderSurface::RenderSurface(Urho3D::RenderSurface* fromUrho) { rendersurface_ = fromUrho; }
RenderSurface::RenderSurface(System::IntPtr^ ptr) : RenderSurface(((Urho3D::RenderSurface*)ptr->ToPointer())) { }
RenderSurface::~RenderSurface() { }
Texture^ RenderSurface::parentTexture::get() { return gcnew UrhoBackend::Texture(rendersurface_->GetParentTexture()); }
int RenderSurface::width::get() { return rendersurface_->GetWidth(); }
int RenderSurface::height::get() { return rendersurface_->GetHeight(); }
TextureUsage RenderSurface::usage::get() { return (UrhoBackend::TextureUsage)rendersurface_->GetUsage(); }
unsigned RenderSurface::numViewports::get() { return rendersurface_->GetNumViewports(); }
void RenderSurface::numViewports::set(unsigned value) { rendersurface_->SetNumViewports(value); }

Viewport^ RenderSurface::viewports::get(unsigned A) { return gcnew UrhoBackend::Viewport(rendersurface_->GetViewport(A)); }

void RenderSurface::viewports::set(unsigned A, Viewport^ B) { rendersurface_->SetViewport(A, B->viewport_); }

RenderSurfaceUpdateMode RenderSurface::updateMode::get() { return (UrhoBackend::RenderSurfaceUpdateMode)rendersurface_->GetUpdateMode(); }
void RenderSurface::updateMode::set(RenderSurfaceUpdateMode value) { rendersurface_->SetUpdateMode((Urho3D::RenderSurfaceUpdateMode)value); }

RenderSurface^ RenderSurface::linkedRenderTarget::get() { return gcnew UrhoBackend::RenderSurface(rendersurface_->GetLinkedRenderTarget()); }
void RenderSurface::linkedRenderTarget::set(RenderSurface^ value) { rendersurface_->SetLinkedRenderTarget(value->rendersurface_); }

RenderSurface^ RenderSurface::linkedDepthStencil::get() { return gcnew UrhoBackend::RenderSurface(rendersurface_->GetLinkedDepthStencil()); }
void RenderSurface::linkedDepthStencil::set(RenderSurface^ value) { rendersurface_->SetLinkedDepthStencil(value->rendersurface_); }

void RenderSurface::QueueUpdate()  {  rendersurface_->QueueUpdate(); }

}
