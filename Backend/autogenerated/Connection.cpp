//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "Connection.h"

#include <Urho3D/Network/Connection.h>
#include <Urho3D/IO/VectorBuffer.h>
#include "VectorBuffer.h"
#include <Urho3D/IO/PackageFile.h>
#include "PackageFile.h"
#include <Urho3D/Input/Controls.h>
#include "Controls.h"

namespace UrhoBackend {

Connection::Connection(Urho3D::Connection* fromUrho) : Object(fromUrho) { connection_ = fromUrho; }
Connection::Connection(System::IntPtr^ ptr) : Connection((Urho3D::Connection*)ptr->ToPointer()) { }

Scene^ Connection::scene::get() { return gcnew UrhoBackend::Scene(connection_->GetScene()); }
void Connection::scene::set(Scene^ value) { connection_->SetScene(value->scene_); }

bool Connection::logStatistics::get() { return connection_->GetLogStatistics(); }
void Connection::logStatistics::set(bool value) { connection_->SetLogStatistics(value); }

bool Connection::client::get() { return connection_->IsClient(); }
bool Connection::connected::get() { return connection_->IsConnected(); }
bool Connection::connectPending::get() { return connection_->IsConnectPending(); }
bool Connection::sceneLoaded::get() { return connection_->IsSceneLoaded(); }
System::String^ Connection::address::get() { return gcnew System::String(connection_->GetAddress().CString()); }
unsigned short Connection::port::get() { return connection_->GetPort(); }
unsigned Connection::numDownloads::get() { return connection_->GetNumDownloads(); }
System::String^ Connection::downloadName::get() { return gcnew System::String(connection_->GetDownloadName().CString()); }
float Connection::downloadProgress::get() { return connection_->GetDownloadProgress(); }
UrhoBackend::Vector3^ Connection::position::get() { return gcnew UrhoBackend::Vector3(connection_->GetPosition()); }
void Connection::position::set(UrhoBackend::Vector3^ value) { connection_->SetPosition(value->ToVector3()); }

UrhoBackend::Quaternion^ Connection::rotation::get() { return gcnew UrhoBackend::Quaternion(connection_->GetRotation()); }
void Connection::rotation::set(UrhoBackend::Quaternion^ value) { connection_->SetRotation(value->ToQuaternion()); }

void Connection::SendMessage(int A, bool B, bool C, VectorBuffer^ D, unsigned contentID)  {  connection_->SendMessage(A, B, C, *D->vectorbuffer_, contentID); }

void Connection::Disconnect(int waitMSec)  {  connection_->Disconnect(waitMSec); }

System::String^ Connection::ToString()  { return  gcnew System::String(connection_->ToString().CString()); }

void Connection::SendPackageToClient(PackageFile^ A)  {  connection_->SendPackageToClient(A->packagefile_); }

Controls^ Connection::controls::get() { return gcnew UrhoBackend::Controls(connection_->controls_); }
void Connection::controls::set(Controls^ value) { connection_->controls_ = *value->controls_; }

unsigned char Connection::timeStamp::get() { return connection_->timeStamp_; }
void Connection::timeStamp::set(unsigned char value) { connection_->timeStamp_ = value; }

UrhoBackend::VariantMap^ Connection::identity::get() { return gcnew UrhoBackend::VariantMap(connection_->identity_); }
void Connection::identity::set(UrhoBackend::VariantMap^ value) { connection_->identity_ = *value->map_; }

}
