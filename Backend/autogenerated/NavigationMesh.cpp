//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#include "stdafx.h"
#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/Container/Str.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../UrControl.h"
#include "NavigationMesh.h"

#include <Urho3D/Navigation/NavigationMesh.h>
#include <Urho3D/Math/BoundingBox.h>
#include "BoundingBox.h"

namespace UrhoBackend {

NavigationMesh::NavigationMesh(Urho3D::NavigationMesh* fromUrho) : Component(fromUrho) { navigationmesh_ = fromUrho; }
NavigationMesh::NavigationMesh(System::IntPtr^ ptr) : NavigationMesh((Urho3D::NavigationMesh*)ptr->ToPointer()) { }

int NavigationMesh::tileSize::get() { return navigationmesh_->GetTileSize(); }
void NavigationMesh::tileSize::set(int value) { navigationmesh_->SetTileSize(value); }

float NavigationMesh::cellSize::get() { return navigationmesh_->GetCellSize(); }
void NavigationMesh::cellSize::set(float value) { navigationmesh_->SetCellSize(value); }

float NavigationMesh::cellHeight::get() { return navigationmesh_->GetCellHeight(); }
void NavigationMesh::cellHeight::set(float value) { navigationmesh_->SetCellHeight(value); }

float NavigationMesh::agentHeight::get() { return navigationmesh_->GetAgentHeight(); }
void NavigationMesh::agentHeight::set(float value) { navigationmesh_->SetAgentHeight(value); }

float NavigationMesh::agentRadius::get() { return navigationmesh_->GetAgentRadius(); }
void NavigationMesh::agentRadius::set(float value) { navigationmesh_->SetAgentRadius(value); }

float NavigationMesh::agentMaxClimb::get() { return navigationmesh_->GetAgentMaxClimb(); }
void NavigationMesh::agentMaxClimb::set(float value) { navigationmesh_->SetAgentMaxClimb(value); }

float NavigationMesh::agentMaxSlope::get() { return navigationmesh_->GetAgentMaxSlope(); }
void NavigationMesh::agentMaxSlope::set(float value) { navigationmesh_->SetAgentMaxSlope(value); }

float NavigationMesh::regionMinSize::get() { return navigationmesh_->GetRegionMinSize(); }
void NavigationMesh::regionMinSize::set(float value) { navigationmesh_->SetRegionMinSize(value); }

float NavigationMesh::regionMergeSize::get() { return navigationmesh_->GetRegionMergeSize(); }
void NavigationMesh::regionMergeSize::set(float value) { navigationmesh_->SetRegionMergeSize(value); }

float NavigationMesh::edgeMaxLength::get() { return navigationmesh_->GetEdgeMaxLength(); }
void NavigationMesh::edgeMaxLength::set(float value) { navigationmesh_->SetEdgeMaxLength(value); }

float NavigationMesh::edgeMaxError::get() { return navigationmesh_->GetEdgeMaxError(); }
void NavigationMesh::edgeMaxError::set(float value) { navigationmesh_->SetEdgeMaxError(value); }

float NavigationMesh::detailSampleDistance::get() { return navigationmesh_->GetDetailSampleDistance(); }
void NavigationMesh::detailSampleDistance::set(float value) { navigationmesh_->SetDetailSampleDistance(value); }

float NavigationMesh::detailSampleMaxError::get() { return navigationmesh_->GetDetailSampleMaxError(); }
void NavigationMesh::detailSampleMaxError::set(float value) { navigationmesh_->SetDetailSampleMaxError(value); }

UrhoBackend::Vector3^ NavigationMesh::padding::get() { return gcnew UrhoBackend::Vector3(navigationmesh_->GetPadding()); }
void NavigationMesh::padding::set(UrhoBackend::Vector3^ value) { navigationmesh_->SetPadding(value->ToVector3()); }

bool NavigationMesh::initialized::get() { return navigationmesh_->IsInitialized(); }
BoundingBox^ NavigationMesh::boundingBox::get() { return gcnew UrhoBackend::BoundingBox(navigationmesh_->GetBoundingBox()); }
BoundingBox^ NavigationMesh::worldBoundingBox::get() { return gcnew UrhoBackend::BoundingBox(navigationmesh_->GetWorldBoundingBox()); }
UrhoBackend::IntVector2^ NavigationMesh::numTiles::get() { return gcnew UrhoBackend::IntVector2(navigationmesh_->GetNumTiles()); }
bool NavigationMesh::Build()  { return  navigationmesh_->Build(); }

bool NavigationMesh::Build(BoundingBox^ A)  { return  navigationmesh_->Build(*A->boundingbox_); }

void NavigationMesh::SetAreaCost(unsigned A, float B)  {  navigationmesh_->SetAreaCost(A, B); }

float NavigationMesh::GetAreaCost(unsigned A)  { return  navigationmesh_->GetAreaCost(A); }

UrhoBackend::Vector3^ NavigationMesh::FindNearestPoint(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ extents)  { return  gcnew UrhoBackend::Vector3(navigationmesh_->FindNearestPoint(A->ToVector3(), extents->ToVector3())); }

UrhoBackend::Vector3^ NavigationMesh::MoveAlongSurface(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B, UrhoBackend::Vector3^ extents, unsigned C)  { return  gcnew UrhoBackend::Vector3(navigationmesh_->MoveAlongSurface(A->ToVector3(), B->ToVector3(), extents->ToVector3(), C)); }

UrhoBackend::Vector3^ NavigationMesh::GetRandomPoint()  { return  gcnew UrhoBackend::Vector3(navigationmesh_->GetRandomPoint()); }

UrhoBackend::Vector3^ NavigationMesh::GetRandomPointInCircle(UrhoBackend::Vector3^ A, float B, UrhoBackend::Vector3^ extents)  { return  gcnew UrhoBackend::Vector3(navigationmesh_->GetRandomPointInCircle(A->ToVector3(), B, extents->ToVector3())); }

float NavigationMesh::GetDistanceToWall(UrhoBackend::Vector3^ A, float B, UrhoBackend::Vector3^ extents)  { return  navigationmesh_->GetDistanceToWall(A->ToVector3(), B, extents->ToVector3()); }

UrhoBackend::Vector3^ NavigationMesh::Raycast(UrhoBackend::Vector3^ A, UrhoBackend::Vector3^ B, UrhoBackend::Vector3^ extents)  { return  gcnew UrhoBackend::Vector3(navigationmesh_->Raycast(A->ToVector3(), B->ToVector3(), extents->ToVector3())); }

}
