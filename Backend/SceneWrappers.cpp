#include "stdafx.h"

#include "SceneWrappers.h"

#include "UrControl.h"
#include "StringHash.h"
//#include "Autogenerated\ComponentCast.h"

#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Node.h>
#include <Urho3D/Scene/Scene.h>
#include <Urho3D/Scene/Component.h>
#include <Urho3D/UI/UIElement.h>

using namespace Urho3D;

namespace UrhoBackend
{

AttributeInfo::AttributeInfo(const Urho3D::AttributeInfo* info)
{
    Name = gcnew System::String(info->name_.CString());
    if (info->enumNames_ != 0)
    {
        EnumNames = gcnew System::Collections::Generic::List<System::String^>();
        const char** enumnames = info->enumNames_;
        while (*enumnames != 0)
        {
            EnumNames->Add(gcnew System::String(*enumnames));
            ++enumnames;
        }
    }
    DefaultValue = gcnew Variant(info->defaultValue_);
    VarType = (int)info->type_;
    Mode = info->mode_;
}

RefCounted::RefCounted(Urho3D::RefCounted* fromUrho) { refcounted_ = fromUrho; addedRef_ = false; }

RefCounted::RefCounted(System::IntPtr^ ptr) : RefCounted((Urho3D::RefCounted*)ptr->ToPointer()) { }

RefCounted::~RefCounted() { if (addedRef_) refcounted_->ReleaseRef(); }

int RefCounted::refs::get() { return refcounted_->Refs(); }

int RefCounted::weakRefs::get() { return refcounted_->WeakRefs(); }

void RefCounted::AddRef() { refcounted_->AddRef(); }
void RefCounted::ReleaseRef() { refcounted_->ReleaseRef(); }

void RefCounted::PropertyChange(System::String^ str)
{
    this->PropertyChanged(this, gcnew System::ComponentModel::PropertyChangedEventArgs(str));
}

UObject::UObject(Urho3D::Object* fromUrho) : RefCounted(fromUrho) { object_ = fromUrho; }
UObject::UObject(System::IntPtr^ ptr) : UObject((Urho3D::Object*)ptr->ToPointer()) { }

UrhoBackend::StringHash^ UObject::type::get() { return gcnew UrhoBackend::StringHash(object_->GetType()); }

UrhoBackend::StringHash^ UObject::baseType::get() { return gcnew UrhoBackend::StringHash(object_->GetBaseType()); }

System::String^ UObject::typeName::get() { return gcnew System::String(object_->GetTypeName().CString()); }

System::String^ UObject::category::get() { return gcnew System::String(object_->GetCategory().CString()); }

Serializable::Serializable(Urho3D::Serializable* serial) : UObject(serial)
{
    serializable_ = serial;
}

Serializable::Serializable(System::IntPtr^ ptr) : UObject((Urho3D::Object*)ptr->ToPointer())
{
    serializable_ = static_cast<Urho3D::Serializable*>(ptr->ToPointer());
}

Node::Node(Urho3D::Node* serial) :
    Serializable(serial)
{
    node_ = serial;
}

System::String^ Serializable::GetTypeName()
{
    return gcnew System::String(serializable_->GetTypeName().CString());
}

AttributeInfo^ Serializable::GetAttributeInfo(System::String^ attr)
{
    const Urho3D::Vector<Urho3D::AttributeInfo>* info = serializable_->GetAttributes();
    if (info)
    {
        for (unsigned i = 0; i < info->Size(); ++i)
        {
            if ((*info)[i].name_ == ToCString(attr))
                return gcnew AttributeInfo(&((*info)[i]));
        }
    }
    return nullptr;
}

System::Collections::Generic::List<AttributeInfo^>^ Serializable::GetAttributeInfo()
{
    System::Collections::Generic::List<AttributeInfo^>^ ret = gcnew System::Collections::Generic::List<AttributeInfo^>();
    const Vector<Urho3D::AttributeInfo>* attrs = serializable_->GetAttributes();
    if (attrs == 0)
        return ret;
    for (unsigned i = 0; i < attrs->Size(); ++i)
        ret->Add(gcnew AttributeInfo(&(*attrs)[i]));
    return ret;
}

System::Collections::Generic::List<System::String^>^ Serializable::GetAttributes()
{
    System::Collections::Generic::List<System::String^>^ ret = gcnew System::Collections::Generic::List<System::String^>();
    const Vector<Urho3D::AttributeInfo>* attrs = serializable_->GetAttributes();
    if (attrs)
    {
        for (unsigned i = 0; i < attrs->Size(); ++i)
        {
            ret->Add(gcnew System::String((*attrs)[i].name_.CString()));
        }
    }

    return ret;
}

System::String^ Serializable::GetAttributeType(System::String^ attr)
{
    const Vector<Urho3D::AttributeInfo>* attrs = serializable_->GetAttributes();
    for (unsigned i = 0; i < attrs->Size(); ++i)
    {
        if ((*attrs)[i].name_ == ToCString(attr))
        {
            return gcnew System::String(Urho3D::Variant::GetTypeName((*attrs)[i].type_).CString());
        }
    }
    return nullptr;
}

System::Collections::Generic::List<System::String^>^ Serializable::GetAttributeTypes()
{
    System::Collections::Generic::List<System::String^>^ ret = gcnew System::Collections::Generic::List<System::String^>();

    const Vector<Urho3D::AttributeInfo>* attrs = serializable_->GetAttributes();
    for (unsigned i = 0; i < attrs->Size(); ++i)
    {
        ret->Add(gcnew System::String(Urho3D::Variant::GetTypeName((*attrs)[i].type_).CString()));
    }
    return ret;
}

Variant^ Serializable::GetAttributeDefault(System::String^ name)
{
    if (!serializable_)
        return nullptr;
    Urho3D::Variant var = serializable_->GetAttributeDefault(ToCString(name));
    if (var.IsEmpty())
        return nullptr;
    return gcnew Variant(var);
}

Variant^ Serializable::GetAttribute(System::String^ name)
{
    if (!serializable_)
        return nullptr;
    Urho3D::Variant var = serializable_->GetAttribute(ToCString(name));
    if (var.IsEmpty())
    {
        return GetAttributeDefault(name);
    }
    return gcnew Variant(var);
}

void Serializable::SetAttribute(System::String^ name, Variant^ var)
{
    serializable_->SetAttribute(ToCString(name), *var->variant_);
    PropertyChange(name);
}

int Node::ComponentCount()
{
    return node_->GetNumComponents();
}

unsigned Node::GetID()
{
    return node_->GetID();
}

int Node::ChildCount()
{
    return node_->GetNumChildren();
}

System::String^ Node::GetName()
{
    return gcnew System::String(node_->GetName().CString());
}

void Node::SetName(System::String^ name)
{
    node_->SetName(ToCString(name));
}

VariantMap^ Node::GetVars()
{
    return gcnew VariantMap(((Urho3D::Node*)serializable_)->GetVars());
}

void Node::SetVar(System::String^ name, Variant^ var)
{
    node_->SetVar(ToCString(name), *var->variant_);
}

bool Node::IsNetworked()
{
    return GetID() >= 0x1000000 ? false : true;
}

Component^ Node::GetComponent(int index)
{
    if (index < ComponentCount())
    {
        Urho3D::Component* comp = node_->GetComponents()[index];
        if (comp != 0)
        {
            //Component^ ret = CreateProperComponent(comp);
            //if (ret != nullptr)
            //    return ret;
            return gcnew Component(comp);
        }
    }
    return nullptr;
}

Component^ Node::GetComponentByID(int id)
{
    const Urho3D::Vector<Urho3D::SharedPtr<Urho3D::Component> >& comps = node_->GetComponents();
    Urho3D::Component* comp = 0;
    
    for (unsigned i = 0; i < comps.Size(); ++i)
    {
        if (comps[i]->GetID() == id)
        {
            comp = comps[i].Get();
            break;
        }
    }
    if (comp)
    {
        //Component^ ret = CreateProperComponent(comp);
        //if (ret != nullptr)
        //    return ret;
        return gcnew Component(comp);
    }
    return nullptr;
}

Component^ Node::GetComponent(System::String^ typeName)
{
    Urho3D::Component* comp = node_->GetComponent(ToCString(typeName));
    if (comp)
    {
        //Component^ ret = CreateProperComponent(comp);
        //if (ret != nullptr)
        //    return ret;
        return gcnew Component(comp);
    }
    return nullptr;
}

Node^ Node::GetChild(System::String^ name, bool recurse)
{
    Urho3D::Node* comp = node_->GetChild(ToCString(name), recurse);
    if (comp)
        return gcnew Node(comp);
    return nullptr;
}

Node^ Node::GetChild(int index)
{
    Urho3D::Node* child = node_->GetChild(index);
    if (child)
        return gcnew Node(child);
    return nullptr;
}

Node^ Node::GetChildByID(int id)
{
    return nullptr;
}

System::Collections::Generic::List<Node^>^ Node::GetChildren()
{
    System::Collections::Generic::List<Node^>^ ret = gcnew System::Collections::Generic::List<Node^>();
    const Urho3D::Vector< Urho3D::SharedPtr<Urho3D::Node> >& children = node_->GetChildren();
    for (unsigned i = 0; i < children.Size(); ++i)
        ret->Add(gcnew Node(children[i].Get()));
    return ret;
}

System::Collections::Generic::List<Component^>^ Node::GetComponents()
{
    System::Collections::Generic::List<Component^>^ ret = gcnew System::Collections::Generic::List<Component^>();
    const Urho3D::Vector<Urho3D::SharedPtr<Urho3D::Component> >& comps = node_->GetComponents();
    for (unsigned i = 0; i < comps.Size(); ++i)
    {
        //Component^ c = CreateProperComponent(comps[i].Get());
        //if (c != nullptr)
        //    ret->Add(c);
        //else
            ret->Add(gcnew Component(comps[i].Get()));
    }
    return ret;
}

Node^ Node::GetParent()
{
    return gcnew Node(node_->GetParent());
}

void Node::AddChild(Node^ node)
{
    node_->AddChild(node->node_);
}

// Creation functions
Node^ Node::CreateChild(System::String^ name, bool replicated)
{
    Urho3D::Node* childNode = node_->CreateChild(ToCString(name), replicated ? Urho3D::REPLICATED : Urho3D::LOCAL);
    return gcnew Node(childNode);
}

Component^ Node::CreateComponent(System::String^ type, bool replicated)
{
    Urho3D::Component* comp = node_->CreateComponent(ToCString(type), replicated ? Urho3D::REPLICATED : Urho3D::LOCAL);
    if (comp)
    {
        //Component^ ret = CreateProperComponent(comp);
        //if (ret != nullptr)
        //    return ret;
        return gcnew Component(comp);
    }
    return nullptr;
}

Component^ Node::GetOrCreateComponent(System::String^ type, bool replicated)
{
    Urho3D::Component* comp = node_->GetOrCreateComponent(ToCString(type), replicated ? Urho3D::REPLICATED : Urho3D::LOCAL);
    if (comp)
    {
        //Component^ ret = CreateProperComponent(comp);
        //if (ret != nullptr)
        //    return ret;
        return gcnew Component(comp);
    }
    return nullptr;
}

Scene^ Node::GetScene()
{
    return gcnew Scene(node_->GetScene());
}

void Node::Remove()
{
    node_->Remove();
    serializable_ = node_ = 0;
}

void Node::RemoveChild(Node^ node)
{
    if (node != nullptr)
        node_->RemoveChild((Urho3D::Node*)node->serializable_);
}

void Node::RemoveComponent(Component^ component)
{
    if (component != nullptr)
        node_->RemoveComponent((Urho3D::Component*)component->GetSerial());
}

void Node::RemoveAllChildren()
{
    node_->RemoveAllChildren();
}

void Node::RemoveAllComponents()
{
    node_->RemoveAllComponents();
}

Component::Component(Urho3D::Component* serial) :
    Serializable(serial)
{
    component_ = serial;
}

unsigned Component::GetID()
{
    return component_->GetID();
}

Node^ Component::GetNode()
{
    return gcnew Node(component_->GetNode());
}

Scene^ Component::GetScene()
{
    return gcnew Scene(component_->GetScene());
}

void Component::Remove()
{
    component_->Remove();
    serializable_ = component_ = 0;
}

Scene::Scene(Urho3D::Scene* serial) :
    Node(serial)
{
    scene_ = serial;
}

UIElement::UIElement(Urho3D::UIElement* element) :
    Serializable(element)
{
    element_ = element;
}

UIElement^ UIElement::GetChild(System::String^ name, bool recurse)
{
    element_->GetChild(ToCString(name), recurse);
    return nullptr;
}

System::Collections::Generic::List<UIElement^>^ UIElement::GetChildren()
{
    System::Collections::Generic::List<UIElement^>^ ret = gcnew System::Collections::Generic::List<UIElement^>();
    for (unsigned i = 0; i < element_->GetNumChildren(); ++i)
        ret->Add(gcnew UIElement(element_->GetChild(i)));
    return ret;
}

UIElement^ UIElement::GetParent()
{
    return gcnew UIElement(element_->GetParent());
}

Variant^ UIElement::GetVar(System::String^ name)
{
    Urho3D::Variant var = element_->GetVar(ToCString(name));
    if (!var.IsEmpty())
        return gcnew Variant(var);
    return nullptr;
}

void UIElement::SetVar(System::String^ name, Variant^ value)
{
    element_->SetVar(ToCString(name), *value->variant_);
}

void UIElement::Remove()
{
    element_->Remove();
    serializable_ = element_ = 0;
}

void UIElement::RemoveChild(UIElement^ elem)
{
    element_->RemoveChild((Urho3D::UIElement*)elem->serializable_);
}

void UIElement::RemoveAllChildren()
{
    element_->RemoveAllChildren();
}

System::String^ UIElement::GetName()
{
    return gcnew System::String(element_->GetName().CString());
}

UIElement^ UIElement::CreateChild(System::String^ typeName, System::String^ name)
{
    Urho3D::UIElement* created = 0;
    if (name != nullptr)
        created = element_->CreateChild(Urho3D::StringHash(ToCString(typeName)), ToCString(name));
    else
        created = element_->CreateChild(Urho3D::StringHash(ToCString(typeName)));
    return gcnew UIElement(created);
}

}