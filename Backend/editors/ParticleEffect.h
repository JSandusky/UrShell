//THIS FILE IS AUTOGENERATED - DO NOT MODIFY
#pragma once

#include <Urho3D/Urho3D.h>
#include <Urho3D/Scene/Component.h>
#include "../MathBind.h"
#include "../ResourceRefWrapper.h"
#include "../SceneWrappers.h"
#include "../Variant.h"
#include "../StringHash.h"
#include "../Attributes.h"

#include "../autogenerated/Enumerations.h"

namespace Urho3D {
    class ParticleEffect;
    class XMLElement;
    class Color;
    class ColorFrame;
    class Rect;
    class TextureFrame;
    class Material;
    class Vector3;
    class Vector2;
}

namespace UrhoBackend {

    ref class XMLElement;

    public ref class TextureFrame
    {
    public:
        TextureFrame() { coordinates = gcnew UrhoBackend::Vector4(); }
        property float time;
        property UrhoBackend::Vector4^ coordinates;
    };

    public ref class ColorFrame
    {
    public:
        ColorFrame() { color = gcnew UrhoBackend::Color(); }
        property float time;
        property UrhoBackend::Color^ color;
    };

    public ref class ParticleEffect {
    public:
        ParticleEffect(Urho3D::ParticleEffect* comp);
        ParticleEffect(System::IntPtr^ ptr);

        // Properties
        property Material^ material { Material^ get(); void set(Material^); }
        property unsigned numParticles { unsigned get(); void set(unsigned); }
        property bool updateInvisible { bool get(); void set(bool); }
        property bool relative { bool get(); void set(bool); }
        property bool sorted { bool get(); void set(bool); }
        property bool scaled { bool get(); void set(bool); }
        property float animationLodBias { float get(); void set(float); }
        property UrhoBackend::EmitterType emitterType { EmitterType get(); void set(EmitterType); }
        property UrhoBackend::Vector3^ emitterSize { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property UrhoBackend::Vector3^ minDirection { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property UrhoBackend::Vector3^ maxDirection { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property UrhoBackend::Vector3^ antForce { UrhoBackend::Vector3^ get(); void set(UrhoBackend::Vector3^); }
        property float dampingForce { float get(); void set(float); }
        property float activeTime { float get(); void set(float); }
        property float inactiveTime { float get(); void set(float); }
        property float minEmissionRate { float get(); void set(float); }
        property float maxEmissionRate { float get(); void set(float); }
        property UrhoBackend::Vector2^ minParticleSize { UrhoBackend::Vector2^ get(); void set(UrhoBackend::Vector2^); }
        property UrhoBackend::Vector2^ maxParticleSize { UrhoBackend::Vector2^ get(); void set(UrhoBackend::Vector2^); }
        property float minTimeToLive { float get(); void set(float); }
        property float maxTimeToLive { float get(); void set(float); }
        property float minVelocity { float get(); void set(float); }
        property float maxVelocity { float get(); void set(float); }
        property float minRotation { float get(); void set(float); }
        property float maxRotation { float get(); void set(float); }
        property float minRotationSpeed { float get(); void set(float); }
        property float maxRotationSpeed { float get(); void set(float); }
        property float sizeAdd { float get(); void set(float); }
        property float sizeMul { float get(); void set(float); }
        property unsigned numColorFrames { unsigned get(); void set(unsigned); }
        property unsigned numTextureFrames { unsigned get(); void set(unsigned); }
        // Methods
        bool Load(XMLElement^);
        bool Save(XMLElement^);
        void AddColorTime(UrhoBackend::Color^, float);
        void AddColorFrame(ColorFrame^);
        void SortColorFrames();
        void RemoveColorFrame(unsigned);
        void SetColorFrame(unsigned, ColorFrame^);
        ColorFrame^ GetColorFrame(unsigned);
        void AddTextureTime(Rect^, float);
        void AddTextureFrame(TextureFrame^);
        void SortTextureFrames();
        void RemoveTextureFrame(unsigned);
        void SetTextureFrame(unsigned, TextureFrame^);
        TextureFrame^ GetTextureFrame(unsigned);
        // Fields

        Urho3D::ParticleEffect* particleeffect_;
    };
}
